syntax = "proto3";
option objc_class_prefix = "PB3";
package pb;
import "pb/common.ext.proto";
import "pb/friend.ext.proto";
import "pb/room.ext.proto";
import "pb/pay.ext.proto";
import "pb/gift.ext.proto";


enum ActPayType {
    Act_Pay_Type_Gold   = 0;
    Act_Pay_Type_Money  = 1;
}

enum ActivityCmdId {
    IC_Activity_None               = 0;
    Activity_Notice                = 202101;
}

enum ActivityType {
    Type_None = 0;
    Type_Normal = 1;
    Type_Task = 2;
}

enum HandleInviteType {
    Handle_Type_None = 0;
    Handle_Type_Agree = 1;
    Handle_Type_Reject = 2;
}

enum RelActivityType {
    Rel_Type_None = 0;
    Rel_Type_GoodNum = 1;
    Rel_Type_Sort_Send = 2;
    Rel_Type_Sort_Get = 3;
    Rel_Type_Mine = 4;
    Rel_Type_Sort_Pay = 5;
    Rel_Type_Sort_Consume = 6;
}

enum ActivityTaskType {
    Task_Type_None                          = 0;
    Task_Type_Pay                           = 1;
    Task_Type_Gift_Get                      = 2;
    Task_Type_Room_Gift_Get                 = 3;
    Task_Type_Gift_Send                     = 4;
    Task_Type_Room_Gift_Send                = 5;
    Task_Type_Buy                           = 6;
    Task_Type_Family_Share                  = 8;
    Task_Type_Room_Online                   = 9;
    Task_Type_Room_Gift_Send_Player_Num     = 10;
    Task_Type_Gift_Send_Player_Num          = 11;
    Task_Type_Gift_Get_Player_Num           = 12;
}

enum ActivityTaskTriggerType {
    Task_Trigger_Type_None = 0;
    Task_Trigger_Type_Repeated = 1;
    Task_Trigger_Type_Once = 2;
    Task_Trigger_Type_Day = 3;
}

enum ActivityTaskTriggerPointType {
    Task_Trigger_Point_Type_None = 0;
    Task_Trigger_Point_Type_Num = 1;
    Task_Trigger_Point_Type_Point = 2;

}

enum ActvityMonsterStatusType {
    ActvityMonsterStatusNone = 0;
    ActvityMonsterStatusSurvive = 1;
    ActvityMonsterStatusDead = 2;
}

enum ActivityLocation {
    Location_None = 0;
    Location_Left_Top = 1;
    Location_Right_Top = 2;
    Location_Bottom = 3;
    Location_Center = 4;
}

enum CountType {
    CountType_None = 0;
    CountType_Get = 1;
    CountType_Send = 2;
}


enum DiceGridType {
    GridNone        = 0;
    Reward          = 1;
    StartPoint      = 2;
    GoTwoStep       = 3;
    Waite           = 4;
    Again           = 5;
    BackTwoStep     = 6;
    OneMoreTime     = 7;
    BackThreeStep   = 8;
    GoThreeStep     = 9;
}

enum DeiceGridRewardType {
    RewardNone      = 0;
    Gift            = 1;
    TreasureBox     = 2;
    Gold            = 3;
    Diamond         = 4;
    RewardEffect    = 5;
    Point           = 6;
}

enum PlayerPageType {
    PlayerPageType_None = 0;
    One_Point_Point = 1;
    Two_Point_Point = 2;
    One_Num_Num = 3;
    Two_Num_NUm = 4;
    One_Num_Point = 5;
    Two_Point_Point_Count = 6;
}

enum RoomSubInfoShow {
    RoomSubInfoShow_None = 0;
    Show_Point = 1;
    Show_People = 2;
}

enum WelfareSataus {
    Status_No_Start = 0;
    Status_Doing = 1;
    Status_Wait_Receive = 2;
    Status_Completed = 3;
    Status_Past = 4;
    Status_Over = 5;
    Status_Need_Manual_Start = 6;
    Status_Wait_Start = 7;
}


enum ActivityAwardType {
    Award_Type_None         = 0;
    Award_Type_Gold         = 1;
    Award_Type_Tick         = 2;
    Award_Type_Gift         = 3;
    Award_Type_BONUS_POOL   = 4;
    Award_Type_Effect       = 6;
    Award_Type_Background   = 7;
    Award_Type_Special      = 8;
}

enum LuckFunType {
    Luck_Fun_Type_None = 0;
    Luck_Fun_Type_Normal = 1;
    Luck_Fun_Type_First_Charge = 2;
}

enum SortTypeExtendType {
    SortTypeExtendTypeNone = 0;
    SortTypeExtendTypePkTeam = 1;
}

enum CPInviteStatusType {
    CPInviteStatusTypeNone = 0;
    CPInviteStatusTypeRejectInvite = 1;
    CPInviteStatusTypeHadCP = 2;
    CPInviteStatusTypeHadInvite = 3;
    CPInviteStatusTypeCanInvite = 4;
    CPInviteStatusTypeBeInvite = 5;
}

enum BetStatusType {
    BetStatusTypeNone           = 0;
    BetStatusTypeBet            = 1;
    BetStatusTypeWaitResult     = 2;
    BetStatusTypeResult         = 3;
    BetStatusTypeWaitNextRound  = 4;
    BetStatusTypeClose          = 5;
}

enum WelfareActionType {
    WelfareActionTypeDefault    = 0;
    WelfareActionTypeCrackEgg   = 1;
    WelfareActionTypeJumpURL    = 2;
}

enum BargainGoodsItemSymbolType {
    BargainGoodsItemSymbolTypeDefault       = 0;
    BargainGoodsItemSymbolTypeRare          = 1;
    BargainGoodsItemSymbolTypeRestrict      = 2;
    BargainGoodsItemSymbolTypeRarity        = 3;
    BargainGoodsItemSymbolTypeAct           = 4;
    BargainGoodsItemSymbolTypeAllSer        = 5;
    BargainGoodsItemSymbolTypeExclusive     = 6;
    BargainGoodsItemSymbolTypeNew           = 7;
}


enum BargainGoodsItemStatus {
    BargainGoodsItemStatusDefault       = 0;
    BargainGoodsItemStatusWait          = 1;
    BargainGoodsItemStatusInProgress    = 2;
    BargainGoodsItemStatusFail          = 3;
    BargainGoodsItemStatusNotBegin      = 4;
    BargainGoodsItemStatusOverdue       = 5;
    BargainGoodsItemStatusCancel        = 6;
    BargainGoodsItemStatusSuc           = 7;
    BargainGoodsItemStatusBuy           = 8;
}

enum HbyAwardType {
    HbyAwardTypeNone = 0;
    HbyAwardTypeHb   = 1;
    HbyAwardTypeTime = 2;
    HbyAwardTypeBoom = 3;
    HbyAwardTypeGift = 4;
    HbyAwardTypeOther= 5;
}

enum BargainBuyType {
    BargainBuyTypeDefault   = 0;
    BargainBuyTypePlay      = 1;
    BargainBuyTypeStore     = 2;
    BargainBuyTypePlayFail  = 3;
}

enum DoubleForecastGambleStatusType {
    ForecastGambleStatusTypeNone        = 0;
    ForecastGambleStatusTypeWaitBet     = 1;
    ForecastGambleStatusTypeBeting      = 2;
    ForecastGambleStatusTypeWaitResult  = 3;
    ForecastGambleStatusTypeEnd         = 4;
    ForecastGambleStatusCancel          = 5;
}

enum DoubleForecastGambleBetResultType {
    ForecastGambleBetResultTypeNone     = 0;
    ForecastGambleBetResultTypeWait     = 1;
    ForecastGambleBetResultTypeWin      = 2;
    ForecastGambleBetResultTypeLose     = 3;
    ForecastGambleBetResultTypeCancel   = 4;
}

enum DoubleForecastGambleBetType {
    DoubleForecastGambleBetTypeNone     = 0;
    DoubleForecastGambleBetTypeNormal   = 1;
    DoubleForecastGambleBetTypeMain     = 2;
}

enum NumLotteryChoosenType {
    NumLotteryChoosenTypeNone   = 0;
    NumLotteryChoosenTypeRandom = 1;
    NumLotteryChoosenTypeManual = 2;
}

enum SortPlayerTagType {
    SortPlayerTagTypeNone    = 0;
    SortPlayerTagTypeLead    = 1;
    SortPlayerTagTypeWin     = 2;
    SortPlayerTagTypeLose    = 3;
    SortPlayerTagTypeRebirth = 5;
}

message NoticeActivity {
    int32 type = 1;
    repeated int32 act_id = 2;
}


enum NumType {
    Num     = 0;
    Hour    = 1;
    Day     = 2;
}

message Int32s {
    repeated int32 arr = 1;
}

message NoticeMsgDetailData {
    int64 player_id = 1;
    string player_name = 2;
    int64 room_id = 3;
    string room_name = 4;
    int64 gift_id = 5;
    string gift_name = 6;
    int64 gift_num = 7;
}

message NoticeRecord {
    int32 msg_id = 1;
    int32 rel_id = 2;
    int32 player_id = 3;
    string msg = 4;
    int64 created = 5;
    NoticeMsgDetailData msg_detail = 6;
}

message LotteryRecord {
    int32 rel_id = 1;
    int32 player_id = 2;
    int32 player_id2 = 3;
    string player_name = 4;
    int32 award_pool_id = 5;
    string gift_name = 6;
    int64 created = 7;
    uint64 num = 8;
}

message SpecialAward {
    int32 type = 1;
    int32 num = 2;
    int32 count = 3;
}

message PlayerActAwardInfo {
    int64 player_id = 1;
    int32 rel_id = 2;
    int64 award_id = 3;
    int32 num = 5;
    ActivityAwardType type = 6;
    int32 value = 7;
    string name = 8;
    string image_url = 9;
}


message ActivityResource {
    ActivityLocation location = 1;
    string activity_url = 2;
    string progress_color = 3;
    string enter_background = 4;
    string enter_small_background = 5;
    string card_background = 6;
    bool player_page_status = 7;
    PlayerPageType player_page_type = 8;
    string player_page_url = 9;
    RoomSubInfoShow roomsubinfo_show = 10;
}

message ActivityTask {
    int32 id = 1;
    string name = 2;
    ActivityTaskType type = 3;
    repeated int32 trigger_id = 4;
    ActivityTaskTriggerType trigger_type = 5;
    int64 trigger_point = 6;
    ActivityTaskTriggerPointType trigger_point_type = 7;
    repeated Int32s reward = 8;
}

message LotteryAward {
    int64 award_id = 1;
    int64 award_num = 2;
    int32 type = 3;
    int64 value = 4;
    string description = 5;
    string image_url = 6;
    string name = 7;
}

message LotteryStageAward {
    int64 stage = 1;
    repeated LotteryAward list = 2;
}

message RelActivity {
    int32 id = 1;
    string name = 2;
    RelActivityType type = 3;
    repeated int32 gift_id = 4;
    repeated ActivityTask tasks = 5;
    int64 start_time = 6;
    int64 end_time = 7;
    int64 guaranteed_times = 8;
    repeated LotteryStageAward lottery_awards = 9;
    int32 num_rate = 10;
    repeated int64 apply_players = 11;
    string remark = 12;
}

message Activity {
    int32 id = 1;
    string name = 2;
    bool status = 3;
    ActivityType type = 4;
    int64 start_time = 5;
    int64 end_time = 6;
    ActivityResource resource = 7;
    repeated RelActivity rel = 8;
}

message SortParam {
    int64 player_id = 1;
    int32 activity_id = 2;
    int32 rel_activity_id = 3;
    int32 page = 4;
    int64 page_size = 5;
}

message SortSupportedResult {
    Player player_data  = 1;
    int64 point         = 2;
}

message SortResult {
    int64 sort                                = 1;
    int64 id                                  = 2;
    int64 id2                                 = 3;
    string name                               = 4;
    string icon                               = 5;
    int64 gold                                = 6;
    int64 point                               = 7;
    int64 num                                 = 8;
    int64 room_id                             = 9;
    string room_name                          = 10;
    int32 like_num                            = 11;
    bool  is_like                             = 12;
    string msg                                = 13;
    int64 last_player_id                      = 14;
    string resource                           = 15;
    int64 result_create_time                  = 16;
    SortPlayerTagType tag                     = 17;
    repeated SortSupportedResult support_list = 18;
    RoomSubInfoExtModuleSchedule progress     = 19;
}

message GroupSortItem {
    repeated SortResult list = 1;
    int64 total_point        = 2;
    int32 sort               = 3;
}


message Theme {
    int32 id = 1;
    string name = 2;
    int32 type = 3;
    bool status = 4;
    int64 start_time = 5;
    int64 end_time = 6;
    string extend = 7;
    string key = 8;
}

message ExchangeRocord {
    int32 asset_id = 1;
    int64 num = 2;
    int64 created = 3;
    string name = 4;
}

message ConfessionCol{
    Player player = 1;
    Player target = 2;
    int64  confession_num = 3;
    string confession_content = 4;
}

message AuctionRecord{
    int32  rank = 1;
    Player from = 2;
    Player to   = 3;
    int64  auction_num = 4;
    string auction_content = 5;
    uint64 auction_price = 6;
    int64  create_at = 7;
    bool is_hidden = 8;
    int64 hot_score = 9;
}

message KingOfSingingItem {
    int64   player_id   = 1;
    string  name        = 2;
    string  icon        = 3;
    int64   popularity  = 4;
    bool    can_vote    = 5;
    bool    is_vote     = 6;
    int32   idx_id      = 7;
    int64   update_time = 8;
}

message H5KingOfSingingFansVoteData {
    int64 player_id             = 1;
    string name                 = 2;
    uint64 support_popularity   = 3;
    string icon_url             = 4;
}

message WelfareExtendRangeData {
    int64 range_id = 1;
    string  name = 2;
    string url = 3;
}

message WelfareInfo {
    int32 welfare_id                                    = 1;
    int32 type                                          = 2;
    WelfareSataus status                                = 3;
    int64 created                                       = 4;
    int64 num                                           = 5;
    int64 trigger_num                                   = 6;
    repeated GiftNumItem gift_list                      = 7;
    int32 trigger_rate                                  = 8;
    string name                                         = 9;
    repeated WelfareExtendRangeData extend_data_list    = 10;
    string remark                                       = 11;
    string img                                          = 12;
    uint32 sort                                         = 13;
    string description                                  = 14;
    WelfareActionType action_type                       = 15;
    uint32 next_start_time                              = 16;
}

message ReceiveWelfare {
    int32 welfare_id                = 1;
    int32 act_rel_id                = 2;
    Player player_data              = 3;
    int64 create_time               = 4;
    repeated GiftNumItem gift_list  = 5;
    string welfare_name             = 6;
}

message ConfWelfare {
    int32 id = 1;
    int32 group = 2;
    int32 relative_id = 3;
    int32 status = 4;
    int64 trigger_num = 5;
    int32 trigger_type = 6;
    int32 trigger_rate = 7;
    int64 num_limit = 8;
    repeated int32 prepose = 9;
}

message Comment {
    int64 player_id = 1;
    string player_name = 2;
    string player_icon = 3;
    string content = 4;
    int64 created = 5;
    int32 like = 6;
    int32 flag = 7;
    int32 comment_id = 8;
    int32 is_like = 9;
}

message PlayerSortMsg {
    int64 id = 1;
    int64 id2 = 2;
    string name = 3;
    string icon = 4;
    int32 gender = 5;
}

message GiftNumItem {
    int64 gift_id = 1;
    int64 gift_num = 2;
    string gift_img = 3;
    string gift_name = 4;
    NumType gift_num_type = 5;
    ActivityAwardType award_type = 6;
}

message DiceGridRewardItem {
    int32 grid_id       = 1;
    DiceGridType type   = 2;
    string grid_img     = 3;
    string grid_name    = 4;
    int32 award_num     = 5;
    NumType num_type    = 6;
    DeiceGridRewardType reward_type = 7;
}

message TreasureBoxItem {
    string award_name = 1;
}

message ManySortResult {
    repeated PlayerSortMsg list = 1;
    int64 sort = 2;
    int64 gold = 3;
    int64 point = 4;
    int64 num = 5;
    int64 room_id = 6;
    string room_name = 7;
    int32 like_num = 8;
    bool  is_like = 9;
    string msg = 10;
    string resource = 11;
}

message ConfLotteryPoint {
    int32 point = 1;
    map<int32, int32> rate = 2;
}


message ConfLottery {
    int32 rel_id = 1;
    repeated ConfLotteryPoint point_list = 2;
}


message NameList {
    int64 player_id = 1;
    string player_name = 2 ;
    string player_icon = 3;
    int64 group = 4;
    int64 point = 5;
    int64 sort = 6;
}

message NameListResult {
    repeated NameList list = 1;
    int64 group = 2;
}

message PlayerWin {
    int64 player_id = 1;
    string player_name = 2;
    string player_icon = 3;
    int64 num = 4;
    int64 award_id = 5;
    int64 award_num = 6;
    int32 type = 7;
    int64 value = 8;
}

message StagePlayerWin {
    repeated PlayerWin list = 1;
    int64 stage = 2;
}

enum TaskScheduleNumType {
    Num_Times   = 0;
    Num_People  = 1;
    Num_Hour    = 2;
}

enum LotteryPlayTimes {
    Times_None = 0;
    Times_One = 1;
    Times_Ten = 2;
}

message TaskScheduleItem {
    int32 cur_num = 1;
    int32 total_num = 2;
    TaskScheduleNumType num_type = 3;
    int64 point = 4;
    bool is_finish = 5;
    ActivityTaskType task_type = 6;
}

message PlayerDiceRewardItem {
    string reward_name  = 1;
    int64   num         = 2;
    NumType num_type    = 3;
}

message MarqueeMsg{
    int64 player_id = 1;
    string player_name = 2;
    string award_name = 3;
    int32 award_num = 4;
    NumType num_type = 5;
}

message LotteryGood {
    int64 good_id = 1;
    string good_name = 2;
    uint32 good_num  = 3;
    NumType good_num_type = 4;
    string good_img = 5;
    DeiceGridRewardType reward_type = 6;
    string description = 7;
}

message LotteryGoodRecords {
    LotteryGood good = 1;
    int64 records_time = 2;
    Player player = 3;
}

message ForecastVoteData {
    int64 player_id = 1;
    int64 vote_num = 2;
}

message ForecastVoteRecord {
    int64 player_id         = 1;
    string player_name      = 2;
    int64 total_vote_num    = 3;
    int32 vote_record_id    = 4;
    uint64 get_gold         = 5;
    string icon_url         = 6;
}

message ForecastVotePlayerData {
    uint32 poll_num = 1;
    bool is_winner  = 2;
}

message RoomAwardDetailData {
    string source_des  = 1;
    string title       = 2;
    AwardType type     = 3;
    string name        = 4;
    string url         = 5;
    int64 num          = 6;
    int64 award_id     = 7;
}


enum QAJoinType {
    EQANotUsed = 0;
    EQAMale    = 1;
    EQAFemale  = 2;
}

enum QAType {
    QANotUsed = 0;
    QAward    = 1;
    QASpecial = 2;
}

message QAJoinReq {
    uint32 act_id           = 1;
    uint32 act_rel_id       = 2;
    QAJoinType gender_type  = 3;
}

message QAJoinRes {
}

message QASubmitReq {
    uint32 act_id     = 1;
    uint32 act_rel_id = 2;
}

message QASubmitRes {
    int32 result = 1;
}

message QAwardReq {
    uint32 act_id     = 1;
    uint32 act_rel_id = 2;
}

message QAwardRes {
    int32 gift_id   = 1;
    int32 gift_count = 2;
    int32 type      = 3;
    string gift_name = 4;
    string gift_img_addr = 5;
}

message QAGetAwardReq {
    uint32 act_id     = 1;
    uint32 act_rel_id = 2;
}

message QAGetAwardRes {
    int32 result = 1;
}

message QAssitFriendsReq {
    uint32 act_id     = 1;
    uint32 act_rel_id = 2;
    int64 friend_id  = 3;
}

message QAssitFriendsRes {
    int32 result = 1;
}

message QAInitReq {
    uint32 act_id             = 1;
    uint32 act_rel_id         = 2;
}

message QAWardInfo {
    int32 gift_id = 1;
    int32 num     = 2;
    int32 type    = 3;
    string gift_name = 4;
    string gift_img_addr = 5;
}

message QAInitRes {
    int32 qa_status     = 1;
    QAWardInfo award    = 2;
    int32 gender_type = 3;
    repeated QAWardInfo infos = 4;
}

message BoxAward {
    int32 gift_id = 1; 		
    string gift_name = 2;	
    int32 gift_num = 3;	
    string gift_url = 4;
    uint64 gold = 5;
}

message GiftBoxRecord {
    int32 box_id = 1;
    int32 gift_id = 2; 		
    int32 gift_num = 3;	
    int64 created = 4;
    string box_name = 5;
    string gift_name = 6;
}

message MonsterNianInviteMsg {
    int64 player_id = 1;
    string player_name = 2;
    int32 msg_id = 3;
    string icon = 4;
}

message PartitionData {
    int64 player_id     = 1;
    int64 num           = 2;
    int64 create_time   = 3;
    Player player_data  = 4;
    int32 act_id        = 5;
    int32 act_rel_id    = 6;
    string remark       = 7;
}

message WinGoodsRecord {
    int64 player_id = 1;
    string player_name = 2;
    string goods_name = 3;
    int64 num = 4;
    int32 gift_id = 5;
    NumType good_num_type = 6;
    DeiceGridRewardType reward_type = 7;
    int64 created_time = 8;
}

message ActAwardFlowRecord {
    int64 player_id = 1;
    string player_name = 2;
    string remark = 3;
    int64 flow_num = 4;
    int64 created_time = 5;
}

message LuckFunGoods{
    string name = 1;
    int32 residual_num = 2;
    int64 cur_reach_num = 3;
    int64 total_reach_num = 4;
    int64 participation_num = 5;
    string goods_img = 6;
    int32 goods_id = 7;
    int32 round_id = 8;
    int32 store_id = 9;
    LuckFunType fun_type = 10;
    DeiceGridRewardType reward_type = 11;
    int32 weight = 12;
    uint64 gold = 13;
}

message NumLotteryChosenNum {
    repeated uint32 numbers = 1;
    uint32 bet_num = 2;
}

message NumLotteryResults {
    repeated uint32 numbers                         = 1;
    bool is_win                                     = 2;
    repeated NumLotteryChosenNum chosen_num_list    = 3;
    uint64 round_id                                 = 4;
    uint32 index                                    = 5;
    NumLotteryChoosenType choosen_type              = 6;
}

message CPInviteData {
    Friender friend = 1;
    CPInviteStatusType status_type = 2;
}

message CPContributeDetailData {
    uint32 past_num = 1;
    uint64 contribute_num = 2;
}

message MotorPattern {
    uint32 id           = 1;
    uint32 num          = 2;
    uint32 gold         = 3;
    float  total_length = 4;
    uint32 time_length  = 5;
    float  speed        = 6;
    string name         = 7;
}

message LocationGiftData {
    float location                      = 1;
    GiftNumItem gift_datas     = 2;
}

message RunCatPlayRecord {
    string round_id                 = 1;
    MotorPattern motor              = 2;
    int64  play_time                = 3;
    float  total_length             = 4;
    repeated GiftNumItem award_list = 5;
}

message TreasureHouseGift {
    bool is_un_lock     = 1;
    int64 gift_id       = 2;
    string gift_icon    = 3;
    string gift_name    = 4;
}

message TreasureHouseGiftItem {
    int64 day_time  = 1;
    string name     = 2;
    repeated TreasureHouseGift gift_list = 3;
}

message LotteryResult {
    uint32 prize = 1;
    uint32 win_num = 2;
}

message ScratchOffLotteryOpenResult {
    uint64 win_gold = 1;
    repeated LotteryResult results  = 2;
    repeated uint32 luck_num        = 3;
}

message ChoosenNums {
    repeated uint32 nums = 1;
}

message LuckFunRankItem {
    Player player_data = 1;
    uint32 num = 2;
    uint32 index = 3;
    repeated BoxAward award_list = 4;
}

message LuckConstellatoryPriceData {
    uint32 price_type_id = 1;
    uint64 price = 2;
    string price_type_str = 3;
    repeated PayChannels pay_channels = 4;
    ActPayType        pay_type        = 5;
}

message LuckConstellatoryRecord{
    string price_type_name = 1;
    string choosen_nums = 2;
    uint32 luck_num = 3;
    int64 created_time = 4;
    repeated LotteryGood award_list = 5;
    int32 luck_num_idx              = 6;
}

message SmeltGoodsData {
    uint64 id           = 1;
    string name         = 2;
    uint64 worth        = 3;
    uint64 own_num      = 4;
    string img          = 5;
    uint64 smelt_worth  = 6;
}

message SmeltGoodsRecordItem {
    int64 created_time  = 1;
    uint64 smelt_worth  = 2;
    repeated SmeltGoodsData spend_goods_list = 3;
}

message SlotMachinePriceItem {
    uint32 price_id                 = 1;
    DeiceGridRewardType price_type  = 2;
    uint64 price_num                = 3;
    string price_img                = 4;
    string price_invalid_img        = 5;
    uint32 goods_id                 = 6;
}

message SlotMachineBetConfigItem {
    uint32 bet_id       = 1;
    string bet_img      = 2;
    string bet_name     = 3;
    float bet_multiples = 4;
    string description  = 5;
    uint32 bet_max_num  = 6;
}

message SlotMachineOpenRecordItem {
    SlotMachineBetConfigItem bet_data   = 1;
}

message SlotMachineBetRecordItem {
    uint64 round_id                                     = 1;
    int64 bet_time                                      = 2;
    repeated SlotMachineBetConfigItem chose_bet_list    = 3;
    SlotMachineBetConfigItem result_bet                 = 4;
    uint64 get_num                                      = 5;
    uint64 spend_num                                    = 6;
}

message SlotMachineBetItem {
    uint32 bet_id   = 1;
    uint32 bet_num  = 2;
    uint64 bet_gold = 3;
}

message SlotMachineBetPriceItem {
    map<uint32, uint32> price_data = 1;
}

message BargainGoodsItem {
    uint32 goods_id                         = 1;
    string name                             = 2;
    string icon_url                         = 3;
    uint64 total_price                      = 4;
    uint32 difficulty                       = 5;
    BargainGoodsItemSymbolType symbol       = 6;
    uint64 inventory                        = 7;
    bool recommend                          = 8;
    BargainGoodsItemStatus bargain_status   = 9;
    int64 up_time                           = 10;
    uint64 bargain_price                    = 11;
    uint64 overdue_time                     = 12;
    uint32 discount                         = 13;
    uint64 discount_price                   = 14;
    uint64  sql_id                          = 15;
    uint64 start_integral                   = 16;
    uint32 num                              = 17;
}

message BargainRecordItem {
    Player player_data  = 1;
    uint64 gold         = 2;
}

message BargainBuyRecordItem {
    Player player_data      = 1;
    uint32 goods_id         = 2;
    BargainBuyType buy_type = 3;
    uint32 buy_num          = 4;
    string goods_name       = 5;
}

message RoomSubInfoExtModule {
    RoomSubInfoExtModuleSymbol symbol       = 1;
    RoomSubInfoExtModuleBase base           = 2;
    RoomSubInfoExtModuleSort sort           = 3;
    RoomSubInfoExtModuleSchedule schedule   = 4;
}

message RoomSubInfoExtModuleSymbol {
    string symbol_url = 1;
}

message RoomSubInfoExtModuleSort {
    int32 sort_num = 1;
}

message RoomSubInfoExtModuleBase {
    string name = 1;
}

message RoomSubInfoExtModuleSchedule {
    int64 cur_num   = 1;
    int64 total_num = 2;
}

message DoubleForecastGambleTeamData {
    string name     = 1;
    string icon     = 2;
    uint64 team_id  = 3;
    bool is_win     = 4;
}

message DoubleForecastGambleTeamBetData {
    DoubleForecastGambleTeamData team_data  = 1;
    float odds                              = 2;
    uint64 bet_num                          = 3;
    uint64 bet_gold                         = 4;
}

message DoubleForecastGambleData {
    uint64 bet_id                                               = 1;
    string bet_name                                             = 2;
    repeated DoubleForecastGambleTeamBetData bet_data_list      = 3;
    DoubleForecastGambleBetType bet_type                        = 4;
    uint64 total_bet_num                                        = 5;
    uint64 total_bet_gold                                       = 6;
}

message DoubleForecastGambleListItem {
    DoubleForecastGambleTeamData player_data                = 1;
    DoubleForecastGambleTeamData opponent_data              = 2;
    repeated DoubleForecastGambleData gamble_data_list      = 3;
    uint64 gamble_id                                        = 4;
    DoubleForecastGambleStatusType status                   = 5;
    string remark                                           = 6;
    int64 bet_time                                          = 7;
    int64 bet_end_time                                      = 8;
    int64 game_show_time                                    = 9;
    uint64 surrender_value                                  = 10;
}

message DoubleForecastGambleBetRecordItem {
    DoubleForecastGambleData gamble_data_list   = 1;
    uint64 total_bet_num                        = 2;
    uint64 total_get_gold                       = 3;
    DoubleForecastGambleBetResultType result    = 4;
    string remark                               = 5;
}

message GetActivityReq {

}

message GetActivityRes {
    repeated Activity activity = 1;
    repeated ConfWelfare welfare = 2;
    repeated ConfLottery lottery = 3;
}

message ActivityRoomSubInfoReq {
    int32 activity_id = 1;
    int32 rel_activity_id = 2;
}

message ActivityRoomSubInfoRes {
    int64 sort                      = 1;
    int64 num                       = 2;
    RoomSubInfoExtModule ext_module = 3;
    int32 activity_id               = 4;
    int32 rel_activity_id           = 5;
}

message CardProgressReq {
    int32 activity_id = 1;
    int32 rel_activity_id = 2;
    int64 player_id = 3;
}

message CardProgressRes {
    int64 point_total = 1;
    int64 point_extra = 2;
    int32 gift_id1 = 3;
    int64 gift_num1 = 4;
    int32 gift_id2 = 5;
    int64 gift_num2 = 6;
}

message ManyPlayerSortReq {
    SortParam param = 1;
    int32 type = 2;
}

message ManyPlayerSortRes {
    repeated ManySortResult list = 1;
    int64 total = 2;
    ManySortResult player = 3;
}

message GroupSortReq {
    int32 act_id        = 1;
    int32 act_rel_id    = 2;
    int32 page          = 3;
    int32 page_size     = 4;
}

message GroupSortRes {
    repeated GroupSortItem list = 1;
    int32 total = 2;
    GroupSortItem player = 3;
}

message PlayerSortReq {
    SortParam param = 1;
    int32 type = 2;
    SortTypeExtendType ext_type = 3;
}

message PlayerSortRes {
    repeated SortResult list = 1;
    SortResult player = 2;
    int64 total = 3;
}

message RoomSortReq {
    SortParam param             = 1;
    int64 room_id               = 2;
    int32 time_day              = 3;
    uint32 get_support_num      = 4;
}

message RoomSortRes {
    repeated SortResult list = 1;
    SortResult room = 2;
    int64 total = 3;
}

message GetGoodNumReq {
    int64 player_id = 1;
    int32 activity_id = 2;
    int32 rel_activity_id = 3;
}

message GetGoodNumRes {
    int64 number = 1;
}

message RandGoodNumReq {
    int64 player_id = 1;
    int32 activity_id = 2;
    int32 rel_activity_id = 3;
}

message RandGoodNumRes {
    int64 number = 1;
    bool guaranteed_award = 2;
}

message BindGoodNumReq {
    int32 activity_id = 1;
    int32 rel_activity_id = 2;
    int64 number = 3;
    int64 old_number = 4;
    bool used = 5;
}

message BindGoodNumRes {
}

message BuyRockGoodNumReq {
    int32 activity_id = 1;
    int32 rel_activity_id = 2;
}

message BuyRockGoodNumRes {
}

message GetPlayerPayReq {
    int64 player_id = 1;
    int32 activity_id = 2;
    int32 rel_activity_id = 3;
}

message GetPlayerPayRes {
    int64 pay_count = 1;
    int32 times = 2;
    int32 count_times = 3;
    int32 bind_num_times = 4;
    int32 guaranteed_used = 5;
    int32 guaranteed_plan = 6;
}

message GetPlayerDiceReq{
    int32 activity_id = 1;
    int32 rel_activity_id = 2;
}

message GetPlayerDiceRes{
    repeated GiftNumItem gift_send_list = 1;
    int64 dice_num = 2;
    int32 cur_grid_location = 3;
    repeated DiceGridRewardItem grid_list = 4;
    repeated TreasureBoxItem box_list = 5;
}

message GetPlayerDiceRewardListReq {
    int32 activity_id = 1;
    int32 rel_activity_id = 2;
    int32 page = 3;
    int32 page_size = 4;
}

message GetPlayerDiceRewardListRes {
    repeated PlayerDiceRewardItem list = 1;
}

message PlayActDiceReq {
    int32 activity_id = 1;
    int32 rel_activity_id = 2;
}

message PlayActDiceRes {
    int32 dice_count = 1;
    DiceGridRewardItem grid_reward = 2;
}

message GetActivityMarqueeMsgReq{
    int32 activity_id = 1;
    int32 rel_activity_id = 2;
    int32 page = 3;
    int32 page_size = 4;
}

message GetActivityMarqueeMsgRes{
    repeated MarqueeMsg list = 1;
}

message GetThemeReq {

}

message GetThemeRes {
    repeated Theme themes = 1;
}

message ListWinLotteryReq {
    int32 activity_id = 1;
    int32 rel_activity_id = 2;
    int64 group = 3;
}

message ListWinLotteryRes {
    repeated StagePlayerWin list = 1;
    int64 total = 2;
}

message GoodNumListReq {

}

message GoodNumListRes {
    repeated int64 list = 1;
    int64 used = 2;
    int64 num = 3;
}

message BuyGoodNumSlotReq {
}

message BuyGoodNumSlotRes {

}

message DelGoodNumReq {
    repeated int64 nums = 1;
}

message DelGoodNumRes {

}

message UseGoodNumReq {
    int64 num = 1;
}

message UseGoodNumRes {

}

message GuaranteedAwardReq {
    int32 activity_id = 1;
    int32 rel_activity_id = 2;
}

message GuaranteedAwardRes {
    int32 gift_id = 1;
    int64 num = 2;
}

message H5ConfessionListReq {
    int32 activity_id = 1;
    int32 rel_activity_id = 2;
}

message H5ConfessionListRes {
    repeated ConfessionCol list = 1;
}
message H5AuctionListReq {
    int32 activity_id = 1;
    int32 rel_activity_id = 2;
    int32 rank_type = 3;
    int32 page = 4;
    int32 page_size = 5;
}
message H5AuctionRankReq {
    int32 activity_id = 1;
    int32 rel_activity_id = 2;
    int32 rank = 3;
    int32 to_id = 4;
    string auction_content = 5;
    uint64 auction_price = 6;
    bool is_hidden = 7;
    int32 re_rank = 8;
}

message H5AuctionListRes {
    repeated AuctionRecord list = 1;
}
message H5AuctionRankRes {
}
message IsPlayerCanHadChargeAwardReq{
    int64 playerID = 1;
}

message IsPlayerCanHadChargeAwardRes{
    bool    is_can_had      = 1;
    string  advertise_img   = 2;
}

message H5KingOfSingingReq{
    int32 act_id        = 1;
    int32 act_rel_id    = 2;
}

message H5KingOfSingingRes{
    int64    count_down_sec         = 1;
    repeated KingOfSingingItem list = 2;
}

message H5KingOfSingingVoteReq{
    int64   singer_id   = 1;
    uint32  vote_num    = 2;
    int32 act_id        = 3;
    int32 act_rel_id    = 4;
}

message H5KingOfSingingVoteRes{

}

message H5KingOfSingingBeVoteRecordReq {
    int32 act_id        = 1;
    int32 act_rel_id    = 2;
    int64 singer_id     = 3;
    uint32 page         = 4;
    uint32 page_size    = 5;
}

message H5KingOfSingingBeVoteRecordRes {
    repeated H5KingOfSingingFansVoteData list = 1;
}

message ListAwardCommentReq {
    int32 activity_id = 1;
    int32 rel_activity_id = 2;
    int32 flag = 3;
}

message ListAwardCommentRes {
    repeated Comment list = 1;
}


message ReceiveWelfareReq {
    int32 welfare_id = 1;
    int64 target_id = 2;
}

message ReceiveWelfareRes {
    string award = 1;
}

message PublishCommentReq {
    int32 activity_id = 1;
    int32 rel_activity_id = 2;
    string notice = 3;
    bool show_name = 4;
}

message PublishCommentRes {

}

message ListCommentReq {
    int32 activity_id = 1;
    int32 rel_activity_id = 2;
    int32 page = 3;
    int64 page_size = 4;
    int32 flag = 5;
    int64 player_id = 6;
    int32 order_by_type = 7;
}

message ListCommentRes {
    repeated Comment list = 1;
}

message ListNameListReq {
    int32 activity_id = 1;
    int32 rel_activity_id = 2;
}

message ListNameListRes {
    repeated NameListResult list = 1;
}



message ListWelfareReq {
    int32 relative_id = 1;
}

message ListWelfareRes {
    repeated WelfareInfo list = 1;
}

message WelfareReceiveLogReq {
    int32 act_rel_id    = 1;
    bool is_get_all     = 2;
    int32 page          = 3;
    int32 page_size     = 4;
}

message WelfareReceiveLogRes {
    repeated ReceiveWelfare list = 1;
    int32 total = 2;
}

message FinishWelfareReq {
    int32 welfare_id = 1;
}

message FinishWelfareRes {

}

message GetUsePointReq {
    int32 activity_id = 1;
    int32 rel_activity_id = 2;
    int64 player_id = 3;
}

message GetUsePointRes {
    int64 point = 1;
    int64 use_point = 2;
}

message DoTaskReq {
    int32 activity_id = 1;
    int32 rel_activity_id = 2;
    int32 type = 3;
}

message DoTaskRes {
    repeated int32 welfare_id = 1;
}

message ApplyForDoWelfareReq {
    uint32 welfare_id   = 3;
}

message ApplyForDoWelfareRes {

}

message GiveALikeReq {
    int32 activity_id = 1;
    int32 rel_activity_id = 2;
    repeated int64 player_id = 3;
    int32 type = 4;
}

message GiveALikeRes {
    string award = 1;
}

message GiveALikeCommentReq {
    int32 activity_id = 1;
    int32 rel_activity_id = 2;
    int32 comment_id = 3;
}

message GiveALikeCommentRes {

}

message UploadFileReq {
    bytes file = 1;
    string file_name = 2;
    string path = 3;
}

message UploadFileRes {
    string url = 1;
}

message PlayerIntegralValueReq {
    uint64 player_id = 1;
    int32 rel_activity_id = 2;
}

message PlayerIntegralValueRes {
    uint64 point = 1;
}

message ListPlayerIntegralLotteryReq {
    int32 act_id        = 1;
    int32 act_rel_id    = 2;
}

message ListPlayerIntegralLotteryRes {
    repeated LotteryGood list = 1;
}

message PlayPlayerIntegralLotteryReq {
    uint64 player_id = 1;
    LotteryPlayTimes play_times = 2;
    int32 rel_activity_id = 3;
}

message PlayPlayerIntegralLotteryRes {
    repeated LotteryGood award_list = 1;
}


message PlayerPlayIntegralLotteryRecordsReq {
    uint64 player_id = 1;
    int32 rel_activity_id = 2;
    int32 page = 3;
    int32 page_size = 4;
}

message PlayerPlayIntegralLotteryRecordsRes {
    repeated LotteryGoodRecords list = 1;
    int32 total = 2;
}

message PlayerBonusPoolReceiveStatusReq {
    uint64 player_id = 1;
    int32 rel_activity_id = 2;
    int32 activity_id = 3;
}

message PlayerBonusPoolReceiveStatusRes {
    WelfareSataus receice_status = 1;
}

message PlayerBonusPoolReceiceNumReq {
    uint64 player_id = 1;
    int32 rel_activity_id = 2;
    int32 activity_id = 3;
}

message PlayerBonusPoolReceiceNumRes {
    uint64 gold_num = 1;
}

message PlayerBonusPoolReceiceReq {
    uint64 player_id = 1;
    int32 rel_activity_id = 2;
    int32 activity_id = 3;
}

message PlayerBonusPoolReceiceRes {
    int64 received_gold_num = 1;
}

message ActivityTaskScheduleListReq {
    int32 activity_id       = 1;
    int32 rel_activity_id   = 2;
}

message ActivityTaskScheduleListRes {
    repeated TaskScheduleItem task_list = 1;
}

message WeekRechargeAwardReq {

}

message WeekRechargeAwardRes {
    uint32 status = 1;
    string img_url = 2;
    string skip_url = 3;
}

message ForecastVoteReq {
    int32 rel_activity_id   = 1;
    repeated ForecastVoteData vote_list = 2;
}

message ForecastVoteRes {

}

message ForecastVoteRecordReq {
    int32 rel_activity_id       = 1;
    int32 page                  = 2;
    int32 page_size             = 3;
    int32 last_vote_record_id   = 4;
    int32 act_id                = 5;
}

message ForecastVoteRecordRes {
    repeated ForecastVoteRecord list = 1;
    int32 total = 2;
    uint32 total_vote_num = 3;
    uint64 total_get_gold = 4;
}

message ForecastBonusPoolNumReq {
    int32 rel_activity_id   = 1;
    int32 act_id            = 2;
}

message ForecastBonusPoolNumRes {
    int64 bonus_pool_num        = 1;
    uint64 total_vote_num       = 2;
    int64 partition_gold_num    = 3;
}

message ForecastPlayerBeVotingNumReq {
    int32 rel_activity_id   = 1;
}

message ForecastPlayerBeVotingNumRes {
    map<int64, ForecastVotePlayerData> vote_list = 1;
}


message RoomAwardDataReq {

}

message RoomAwardDataRes {
    int64 count_down_sec      = 1;
    GiftConfigItem award_data = 2;
}

message RoomAwardReceiveReq {

}

message RoomAwardReceiveRes {
    repeated RoomAwardDetailData list = 1;
}


message ActOpenGiftBoxReq {
    int32 rel_activity_id = 1;
    int32 gift_id = 2; 		
    int32 num = 3;
    bool is_luck_bag = 4;
}

message ActOpenGiftBoxRes {
    repeated BoxAward list = 1;
}

message ActGiftBoxRecordReq {
    int32 rel_activity_id = 1;
}
message ActGiftBoxRecordRes {
    repeated GiftBoxRecord list = 1;
}


message GetLotteryPointReq {
    int32 rel_id = 1;
}

message GetLotteryPointRes {
    int32 point = 1;
}

message DrawLuckyReq {
    int32 rel_id = 1;
    int32 num = 2;
    int32 store_id = 3;
}

message DrawLuckyRes {
    string reward = 1;
}

message ListNoticeRecordReq {
    int32 rel_id = 1;
    int32 player_id = 2;
    int32 conf_notice_id = 3;
    int32 page = 4;
    int32 page_size = 5;
    int32 last_msg_id = 6;
}

message ListNoticeRecordRes {
    repeated NoticeRecord list = 1;
    int32 total = 2;
}

message ListLotteryRecordReq {
    int32 rel_id = 1;
    int32 player_id = 2;
    int32 weight = 3;
    int32 page = 4;
    int32 page_size = 5;
}

message ListLotteryRecordRes {
    repeated LotteryRecord list = 1;
    int32 total = 2;
}


message ListSpecialAwardReq {
    int32 rel_activity_id = 1;
    int64 player_id = 2;
}

message ListSpecialAwardRes {
    repeated SpecialAward list = 1;
}

message ListPlayerActAwardReq {
    int32 rel_id = 1;
    int64 stage = 2;
    int64 player_id = 3;
    int32 page = 4;
    int32 page_size = 5;
}

message ListPlayerActAwardRes {
    repeated PlayerActAwardInfo list = 1;
}

message PartitionRecordsReq {
    int32 act_id = 1;
    int32 act_rel_id = 2;
    int32 page = 3;
    int32 page_size = 4;
    bool is_all = 5;
}

message PartitionRecordsRes {
    repeated PartitionData list = 1;
    int32 total = 2;
}

message PartitionTotalReq {
    int32 act_id = 1;
    int32 act_rel_id = 2;
}

message PartitionTotalRes {
    uint64 total = 1;
}

message IsPlayerDidFirstChargeReq{

}

message IsPlayerDidFirstChargeRes {
    bool is_charge = 1;
}

message WinGoodsRecordsReq {
    int32 act_id = 1;
    int32 act_rel_id = 2;
    int32 page = 3;
    int32 page_size = 4;
    bool is_get_all = 5;
}

message WinGoodsRecordsRes {
    repeated WinGoodsRecord list = 1;
    int32 total = 2;
}

message ActAwardFlowRecordReq {
    int32 act_id = 1;
    int32 act_rel_id = 2;
    int32 page = 3;
    int32 page_size = 4;
}

message ActAwardFlowRecordRes {
    repeated ActAwardFlowRecord list = 1;
    int32 total = 2;
}

message OldPlayerGetAwardByOtherPlayerIDReq {
    int32 act_id = 1;
    int32 act_rel_id = 2;
    int64 other_player_id = 3;
}

message OldPlayerGetAwardByOtherPlayerIDRes {

}

message MonsterNianStatusReq {
    int32 act_id = 1;
    int32 act_rel_id = 2;
}

message MonsterNianStatusRes {
    ActvityMonsterStatusType status = 1;
    int64 surplus_blood = 2;
    int64 total_blood = 3;
    int32 round_id = 4;
}

message MonsterNianGoodAttackDataReq {
    int32 act_id = 1;
    int32 act_rel_id = 2;
}

message MonsterNianGoodAttackDataRes {
    map<int32, int64> good_attack_data = 1;
}

message MonsterNianAttackReq {
    int32 act_id = 1;
    int32 act_rel_id = 2;
    int32 good_id = 3;
}

message MonsterNianAttackRes {
    int32 attack_blood = 1;
}

message MonsterNianSendInviteReq {
    int32 act_id = 1;
    int32 act_rel_id = 2;
    int64 be_invite_player_id = 3;
}

message MonsterNianSendInviteRes {

}

message MonsterNianHandleInviteReq {
    int32 act_id = 1;
    int32 act_rel_id = 2;
    HandleInviteType handle_type = 3;
    int32 msg_id = 4;
}

message MonsterNianHandleInviteRes {

}

message MonsterNianTeamDataReq {
    int32 act_id = 1;
    int32 act_rel_id = 2;
    int32 page = 3;
    int32 page_size = 4;
}

message MonsterNianTeamDataRes {
    repeated Player team_players = 1;
    int64 cur_round_attack_blood = 2;
    int32 team_players_num = 3;
}

message MonsterNianInviteMsgsReq {
    int32 act_id = 1;
    int32 act_rel_id = 2;
    int32 page = 3;
    int32 page_size = 4;
}


message MonsterNianInviteMsgsRes {
    repeated MonsterNianInviteMsg msgs = 1;
    int32 total = 2;
}

message MonsterNianMvpRecordsReq {
    int32 act_id = 1;
    int32 act_rel_id = 2;
    int32 page = 3;
    int32 page_size = 4;
}

message MonsterNianMvpRecordsRes {
    repeated SortResult list = 1;
    int32 total = 2;
}

message LuckFunGoodsListReq {
    int32 act_id = 1;
    int32 act_rel_id = 2;
    LuckFunType fun_type = 3;
}

message LuckFunGoodsListRes {
    repeated LuckFunGoods list = 1;
}

message LuckFunSnatchTreasureReq {
    int32 act_id = 1;
    int32 act_rel_id = 2;
    int32 snatch_num = 3;
    int32 goods_id = 4;
}

message LuckFunSnatchTreasureRes {
    bool is_over = 1;
}

message LuckFunRankListReq {
    uint32 act_id = 1;
    uint32 act_rel_id = 2;
    uint32 page = 3;
    uint32 page_size = 4;
}

message LuckFunRankListRes {
    repeated LuckFunRankItem list = 1;
    LuckFunRankItem my_rank = 2;
    uint32 total = 3;
}

message AnniversaryReq {
    uint32 player_id = 1;
}

message AnniversaryRes {
    uint32 id = 1;
    uint32 id2 = 2;
    string nickname = 3;
    string icon = 4;
    string register_at = 5;
    float  register_over_percent = 6;
    string online_date_at = 7;
    uint32 online = 8;
    uint32 follow_count = 9;
    uint32 fans_count = 10;
    bool   is_once_intimate = 11;
    uint32 intimate_count = 12;
    uint32 intimate_player_id = 13;
    uint32 intimate_player_id2 = 14;
    string intimate_nickname = 15;
    uint32 intimate_days = 16;
    uint32 receive_gift_count = 17;
    uint32 receive_gift_total_gold = 18;
    string receive_gift_name = 19;
    uint32 receive_gift_gold = 20;
    string receive_gift_image_url = 21;
    uint32 give_gift_count = 22;
    uint32 give_gift_total_gold = 23;
    string give_gift_name = 24;
    uint32 give_gift_gold = 25;
    string give_gift_image_url = 26;
    float  crackegg_over_percent = 27;
    string keyword = 28;
}

message DoubleForecastGambleListReq {
    uint32 act_id        = 1;
    uint32 act_rel_id    = 2;
    int64 day           = 3;
}

message DoubleForecastGambleListRes {
    repeated DoubleForecastGambleListItem list  = 1;
    repeated int64 bet_time_arr                 = 2;
    int64 cur_day                               = 3;
}

message DoubleForecastBetReq {
    uint32 act_id        = 1;
    uint32 act_rel_id    = 2;
    uint64 gamble_id    = 3;
    uint64 bet_id       = 4;
    uint64 team_id      = 5;
    uint64 bet_num      = 6;
}

message DoubleForecastBetRes {
}

message DoubleForecastBetRecordReq {
    uint32 act_id        = 1;
    uint32 act_rel_id    = 2;
    int64 day           = 3;
    uint32 page         = 4;
    uint32 page_size    = 5;
}

message DoubleForecastBetRecordRes {
    repeated DoubleForecastGambleBetRecordItem list = 1;
    uint32 total = 2;
}

message NumLotteryStatusReq{
    int32 act_id = 1;
    int32 act_rel_id = 2;
}

message NumLotteryStatusRes {
    uint64 cur_round_id = 1;
    uint64 cur_jackpot = 2;
    uint64 count_down_sec = 3;
}

message NumLotteryChosenNumsReq {
    int32 act_id = 1;
    int32 act_rel_id = 2;
    uint64 round_id = 3;
    uint32 page = 4;
    uint32 page_size = 5;
}

message NumLotteryChosenNumsRes {
    repeated NumLotteryChosenNum list = 1;
    uint32 total = 2;
}

message NumLotteryResultsReq {
    int32 act_id = 1;
    int32 act_rel_id = 2;
    uint64 round_id = 3;
    bool is_records = 4;
    uint32 page = 5;
    uint32 page_size = 6;
}

message NumLotteryResultsRes {
    repeated NumLotteryResults list = 1;
    uint32 total = 2;
}

message NumLotteryPlayReq {
    int32 act_id = 1;
    int32 act_rel_id = 2;
    repeated uint32 num_list = 3;
}

message NumLotteryPlayRes {

}

message FetchPkteamInfoReq{
    enum FetchType {
        ZERO                    = 0;
        TEAMID_NOTIMELIMIT      = 1;
        PLAYERID_TIMELIMIT      = 2;
        TEAMID_TIMELIMIT        = 3;
    }
    FetchType fetch_type = 1;
    int64 id             = 2;
}

message PkteamMemberInfo {
    int64 player_id             = 1;
    string player_name          = 2;
    string player_icon          = 3;
    int64 pk_value              = 4;
    int64 player_id2            = 5;
}
message FetchPkteamInfoRes{
    int64 pkteam_id                         = 1;
    string name                             = 2;
    string slogan                           = 3;
    int64 continue_win                      = 4;
    int64 pk_value                          = 5;
    bool  can_modify_slogan                 = 6;
    int64  master_id                        = 7;
    repeated PkteamMemberInfo  member_list  = 8;
    repeated PkteamMemberInfo  apply_list   = 9;
}

message SetPkteamSloganReq {
    int64 pkteam_id                         = 1;
    string slogan                           = 2;
}

message SetPkteamSloganRes {
}

message CreatePkteamReq {
    int64 player_id           = 1;
    string name               = 2;
    string slogan             = 3;
    int32 act_rel_id          = 4;
}

message CreatePkteamRes {
}

message ApplyPkteamReq {
    int64 pkteam_id                         = 1;
}

message ApplyPkteamRes {
}

enum ApplyPkTeamType {
    ZERO        = 0;
    APPLYING    = 1;
    AGREE       = 2;
    REJECT      = 3;
    OTHERAGREE  = 4;
}

message AgreeApplyPkteamReq {
    ApplyPkTeamType apply_type              = 1;
    int64 pkteam_id                         = 2;
    repeated int64 player_id_list           = 3;
}

message AgreeApplyPkteamRes {
}

message OpenPkteamReq {
    int64 pkteam_id                         = 1;
}

enum PkteamMatchType {
    PKMT_ZERO    = 0;
    PKMT_SUCC    = 1;
    PKMT_FAIL    = 2;
    PKMT_WAIT    = 3;
}
message OpenPkteamRes {
    PkteamMatchType match_type = 1;
}

message PkTeamPkInfo {
    int64 pk_num                        = 1;
    int64 end_time                      = 2;
    FetchPkteamInfoRes         team_a   = 3;
    FetchPkteamInfoRes         team_b   = 4;
}
message FetchPkInfoListReq {
}
message FetchPkInfoListRes {
    repeated PkTeamPkInfo   pkinfo_list  = 1;
}

message FetchPkInfoReq {
    int64 player_id           = 1;
}
message FetchPkInfoRes {
    PkTeamPkInfo   pkinfo  = 1;
}

enum PkteamResultType {
    PKRT_ZERO    = 0;
    PKRT_WIN     = 1;
    PKRT_LOSE    = 2;
    PKRT_DRAW    = 3;
}

message PkRecord {
    int64 pk_num                 = 1;
    int64 begin_time             = 2;
    PkteamResultType result_type = 3;
    int64 pkteam_id              = 4;
    string name                  = 5;
}
message FetchPkRecordListReq {
    int64 player_id             = 1;
    int64 page                  = 2;
    int64 page_size             = 3;
}
message FetchPkRecordListRes {
    repeated PkRecord record_list = 1;
    int64 total_count             = 2;
}

message FetchPkInfoByPkNumReq {
    int64 pk_num                 = 1;
}

message FetchPkInfoByPkNumRes {
    int64 pk_num                 = 1;
    int64 pkteam_id_a            = 2;
    string pkteam_name_a         = 3;
    PkteamResultType result_a    = 4;

    int64 pkteam_id_b            = 5;
    string pkteam_name_b         = 6;
    PkteamResultType result_b    = 7;
}

message HelpTeamReq {
    int32 act_id        = 1;
    int32 act_rel_id    = 2;
    uint32 help_num     = 3;
}

message HelpTeamRes {

}

message GetActPlayerRoomLiveDataReq {
    uint32 act_id        = 1;
    uint32 act_rel_id    = 2;
}

message GetActPlayerRoomLiveDataRes {
    repeated RoomLive live_list = 1;
}

message SendCPInvitationReq {
    uint32 act_id           = 1;
    uint32 act_rel_id       = 2;
    uint64 receiver_id      = 3;
}

message SendCPInvitationRes {

}

message CPInvitationListReq {
    uint32 act_id           = 1;
    uint32 act_rel_id       = 2;
}

message CPInvitationListRes {
    repeated CPInviteData list = 1;
}

message HandleCPInvitationReq {
    uint32 act_id                   = 1;
    uint32 act_rel_id               = 2;
    uint32 inviter_id               = 3;
    HandleInviteType handle_type    = 4;
}

message HandleCPInvitationRes {

}

message CPDataReq {
    uint32 act_id                   = 1;
    uint32 act_rel_id               = 2;
}

message CPDataRes {
    uint64 cp_id                                    = 1;
    Player player_f                                 = 2;
    Player player_s                                 = 3;
    CPContributeDetailData total_contribute_data    = 4;
    CPContributeDetailData my_contribute_data       = 5;
    uint32 rank_num                                 = 6;
}

message BargainDataReq{
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
}

message BargainDataRes {
    BargainGoodsItem cur_bargain_goods  = 1;
    BargainGoodsItem fail_bargain_goods = 2;
    uint64 send_gold                    = 3;
}

message BargainListReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
}

message BargainListRes {
    repeated BargainGoodsItem list = 1;
}

message BargainGoodsReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
    uint32 goods_id     = 3;
}

message BargainGoodsRes {

}

message BargainStoreListReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
}

message BargainStoreListRes {
    repeated BargainGoodsItem list = 1;
}

message BargainBuyReq {
    uint32 act_id           = 1;
    uint32 act_rel_id       = 2;
    BargainBuyType buy_type = 3;
    uint32 goods_id         = 4;
    uint32 buy_num          = 5;
}

message BargainBuyRes {
    repeated BargainGoodsItem goods_list = 1;
}

message StopBargainingReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
}

message StopBargainingRes {

}

message BargainRecordReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
    uint32 page         = 3;
    uint32 page_size    = 4;
}

message BargainRecordRes {
    repeated BargainRecordItem list = 1;
    uint32 total = 2;
}

message BargainBuyRecordReq {
    uint32 act_id           = 1;
    uint32 act_rel_id       = 2;
    BargainBuyType buy_type = 3;
    uint32 page             = 4;
    uint32 page_size        = 5;
}

message BargainBuyRecordRes {
    repeated BargainBuyRecordItem list  = 1;
    uint32 total                        = 2;
}

message RunCatConfigDataReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
}

message RunCatConfigDataRes {
    repeated MotorPattern motor_pattern_list = 1;
}

message RunCatPlayReq {
    uint32 act_id           = 1;
    uint32 act_rel_id       = 2;
    uint32 motor_pattern_id = 3;
}

message RunCatPlayRes {
    string round_id                     = 1;
    repeated LocationGiftData gift_list = 2;
}

message RunCatReportSettlementResultReq {
    string round_id                         = 1;
    uint32 act_id                           = 2;
    uint32 act_rel_id                       = 3;
    float  total_run_length                 = 4;
    uint32 total_click_num                  = 5;
    repeated uint32 click_num_per_second    = 6;
}

message RunCatReportSettlementResultRes {
    repeated GiftNumItem gain_gift_list = 1;
}

message RunCatPlayRecordReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
    uint32 page         = 3;
    uint32 page_size    = 4;
}

message RunCatPlayRecordRes {
    repeated RunCatPlayRecord list = 1;
    uint32 total = 2;
}

message TreasureHouseListReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
}

message TreasureHouseListRes {
    repeated TreasureHouseGiftItem list = 1;
}

message BuyScratchOffLotteryTicksReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
    uint32 tick_num     = 3;
}

message BuyScratchOffLotteryTicksRes {
    repeated uint32 luck_nums = 1;
}

message ScratchOffLotteryOpenReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
}

message ScratchOffLotteryOpenRes {
    repeated  ChoosenNums buy_nums      = 1;
    ScratchOffLotteryOpenResult result  = 2;
}

message ScratchOffLotteryStatusReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
}

message ScratchOffLotteryStatusRes {
    uint64 total_win_gold = 1;
    repeated uint32 no_open_luck_nums = 2;
}

message BuyAndOpenScrarchOffLotteryTicksReq {
    uint32 act_id                   = 1;
    uint32 act_rel_id               = 2;
    repeated  ChoosenNums buy_nums  = 3;
}

message LuckConstellatoryDataReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
}

message LuckConstellatoryDataRes {
    repeated LuckConstellatoryPriceData price_list = 1;
}

message LuckConstellatoryDrawReq {
    uint32 act_id                   = 1;
    uint32 act_rel_id               = 2;
    uint32 price_type_id            = 3;
    repeated uint32 draw_location   = 4;
    RequestPayReq pay_req           = 5;
}

message LuckConstellatoryDrawRes {
    map<uint32, LotteryGood> award          = 1;
    uint32 luck_num                         = 2;
    repeated LotteryGood award_show_record  = 3;
    RequestPayRes pay_res                   = 4;
    string product_id                       = 5;
}

message LuckConstellatoryRecordReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
    uint32 page         = 3;
    uint32 page_size    = 4;
}

message LuckConstellatoryRecordRes {
    repeated LuckConstellatoryRecord list = 1;
    uint32 total = 2;
}

message SmeltDataReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
    uint32 page         = 3;
    uint32 page_size    = 4;
}

message SmeltDataRes {
    repeated SmeltGoodsData goods_list  = 1;
    uint32 total                        = 2;
}

message SmeltingReq {
    uint32 act_id                   = 1;
    uint32 act_rel_id               = 2;
    repeated SmeltGoodsData goods   = 3;
}

message SmeltingRes {
    uint64 smelt_worth = 1;
}

message SmeltRecordReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
    uint32 page         = 3;
    uint32 page_size    = 4;
}

message SmeltRecordRes {
    repeated SmeltGoodsRecordItem list  = 1;
    uint32 total                        = 2;
}

message SlotMachineDataReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
}

message SlotMachineDataRes {
    uint64 round_id                                     = 1;
    uint32 count_down                                   = 2;
    BetStatusType status                                = 3;
    repeated SlotMachineBetConfigItem bet_config_data   = 4;
    repeated SlotMachinePriceItem price_data            = 5;
    map<uint32, SlotMachineBetItem> bet_data            = 6;
    int64 round_time                                    = 7;
}

message SlotMachineBetReq {
    uint32 act_id                       = 1;
    uint32 act_rel_id                   = 2;
    map<uint32, SlotMachineBetPriceItem> bet_lit = 3;
}

message SlotMachineBetRes {
}

message SlotMachineOpenRecordsReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
    uint32 page         = 3;
    uint32 page_size    = 4;
}

message SlotMachineOpenRecordsRes {
    repeated SlotMachineOpenRecordItem list = 1;
    uint32 total = 2;
}

message SlotMachineBetRecordsReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
    uint32 page         = 3;
    uint32 page_size    = 4;
    uint64 round_id     = 5;
}

message SlotMachineBetRecordsRes {
    repeated SlotMachineBetRecordItem list = 1;
    uint32 total = 2;
}

message WulinConfig{
    int32 wulin_type    = 1;
    int32 wulin_level   = 2;
    uint64 price        = 3;
    uint32 wulin_star   = 4;
    string vs_win   = 5;
}
message WulinConfigReq{
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
}
message WulinConfigRes{
    WulinUserData udata         = 1;
    repeated WulinConfig clist  = 2;
}
message WulinRecord{
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
    int32  id = 3;
    Player from = 4;
    Player to   = 5;
    int64  wulin_type = 6;
    int32  wulin_level = 7;
    uint64 wulin_price = 8;
    int32  wulin_select = 9;
    int32  wulin_method = 10;
    int32  wulin_nomethod = 11;
    bool   is_hang = 12;
    int32  wulin_result = 13;
    string wulin_award = 14;
    int64  create_at = 15;
}

message WulinActionData{
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
    uint32 wulin_type   = 3;
    uint32 wulin_level  = 4;
    int32  wulin_target = 5;
    int32  wulin_select = 6;
    uint32 price = 7;
    uint32 wulin_star = 8;
}
message WulinUserData{
    uint32  data_guess  = 1;
    uint32  data_vip    = 2;
    uint32  data_star   = 3;
    uint32  id          = 4;
    bool    is_hang     = 5;
}
message WulinRecordsReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
    int32  page         = 3;
    int32  page_size    = 4;
    int32  record_type  = 5;
}
message WulinRecordsRes {
    repeated WulinRecord list = 1;
    uint32 total = 2;
}

message HbyStartReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
}

message  HbyStartRes {
    int64 game_id        = 1;
    repeated HbDate datas = 2;
}

message HbDate {
    int32 award_id             = 1;
    int32 award_type           = 2;
    string award_name          = 3;
    int32 is_received          = 4;
    int64 award_price          = 5;
    repeated ExtraHbDate extra = 6;
    string img_addr            = 7;
    int32 time                 = 8;
    int32 award_label          = 9;
}

message ExtraHbDate {
    int32 award_id          = 1;
    int32 award_type        = 2;
    string award_name       = 3;
    int32 award_num         = 4;
    string img_addr         = 5;
    int32 award_label       = 6;
    int64 award_price       = 7;
    int32 is_received       = 8;
}

message HbyUserWinReq {
    uint32   act_id       = 1;
    uint32   act_rel_id   = 2;
    repeated ExtraHbDate extra = 3;
}

message HbyUserWinRes {
}

message HbyInitReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
}

message HbyInitRes {
    int64 total_point          = 1;
    int64 game_coin            = 2;
    map<int64, int32> awards   = 3;
}

message HbyWithdrawalWindowReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
}

message ExtraHbDates {
    repeated ExtraHbDate data = 1;
}

message HbyWithdrawalDate {
    int32 award_id          = 1;
    int32 award_type        = 2;
    string award_name       = 3;
    int32 award_num         = 4;
    int32 is_award          = 5;
    string img_addr         = 6;
    int32 award_label       = 7;
    int64 award_price       = 8;
}

message HbyWithdrawalDates {
    repeated HbyWithdrawalDate data = 1;
}

message HbyWithdrawalWindowRes {
    repeated HbyWithdrawalDates datas = 1;
    int32 isWithdrawal                = 2;
}

message HbyWithdrawalReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
}

message HbyWithdrawalRes {
    ExtraHbDates dates = 1;
}

message HbyWithdrawalDataReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
}

message HbyWithdrawal {
    map<string, ExtraHbDates> awards = 1;
}

message HbyWithdrawalDataRes {
    repeated HbyWithdrawal dates = 1;
}

message HbyAwardMessageReq {
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
}

message HbyAwardMessageDate {
    string message = 1;
    string user_name = 2;
    int32  type =  3;
    int64  coins = 4;
}

message HbyAwardMessageRes {
    repeated  HbyAwardMessageDate dates = 1;
}


message AuctionAccountInitReq{
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
}
message AccountData{
    uint32 account      = 1;
    uint64 price        = 2;
    uint32 account_type = 3;
    Player player       = 4;
    uint64 end_time     = 5;
    uint64 auction_price = 6;
    int32 account_status = 7;
    int64 time_now       = 8;
    int64 add_price  = 9;
}
message AccountUserData{
    repeated uint32 account = 1;
    repeated uint32 account_status = 2;
}
message AuctionAccountInitRes{
    AccountUserData udata       = 1;
    repeated AccountData clist  = 2;
}
message AuctionAccountRecordReq{
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
    int32  page         = 4;
    int32  page_size    = 5;
}
message AuctionAccountRecord{
    uint32 auction_account = 1;
    uint32 auction_price   = 2;
    int32  create_at       = 3;
}
message AuctionAccountRecordRes{
    repeated AuctionAccountRecord records = 1;
    uint32 total = 2;
}
message AuctionAccountReq{
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
    uint32 auction_account = 3;
    uint32 auction_price   = 4;
}
message AuctionAccountRes{
}


message SlotMachine2020DataReq{
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
}

message SlotMachine2020PlayPayInfo{
    uint32 id = 1;
    uint32 gold = 2;
}

message SlotMachine2020ItemInfo{
    string id = 1;
    string icon = 2; 
}

message SlotMachine2020Formula{
    string formula=1;
    uint32 multiple=2;
}

message SlotMachine2020DataRes{
    repeated SlotMachine2020PlayPayInfo play_pay_info = 1;
    repeated SlotMachine2020ItemInfo item_info=2;
    repeated SlotMachine2020Formula formula_info=3;
    uint32 gift_id=4;
    string gift_name=5;
}


message SlotMachine2020UserDateReq{
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
}

message SlotMachine2020UserDateRes{
    uint32 total_win_gold =1;
    uint32 today_win_gold =2;
}

message SlotMachine2020WinRecordsReq{
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
    int32 page = 3;
    int32 page_size = 4;
}

message SlotMachine2020WinRecords{
    string nickname = 1;
    int64 player_id = 2;
    uint32 multiple=3;
    uint32 win_gold=4;
}

message SlotMachine2020WinRecordsRes{
    repeated SlotMachine2020WinRecords list=1;
}

message SlotMachine2020BetReq{
    uint32 act_id       = 1;
    uint32 act_rel_id   = 2;
    uint32 play_pay_info_id=3;
}

message SlotMachine2020BetRes{
    string formula=1;
    uint32 win_gold=2;
    uint32 gift_id=3;
    string gift_name=4;
    uint32 gift_num=5;
}


service ActivityExtObj {
    rpc GetActivity (GetActivityReq) returns (GetActivityRes);
    rpc ActivityRoomSubInfo (ActivityRoomSubInfoReq) returns (ActivityRoomSubInfoRes);
    rpc CardProgress (CardProgressReq) returns (CardProgressRes);

    rpc GetGoodNum (GetGoodNumReq) returns (GetGoodNumRes);
    rpc RandGoodNum (RandGoodNumReq) returns (RandGoodNumRes);
    rpc BindGoodNum (BindGoodNumReq) returns (BindGoodNumRes);
    rpc BuyRockGoodNum (BuyRockGoodNumReq) returns (BuyRockGoodNumRes);
    rpc GoodNumList (GoodNumListReq) returns (GoodNumListRes);
    rpc BuyGoodNumSlot (BuyGoodNumSlotReq) returns (BuyGoodNumSlotRes);
    rpc UseGoodNum (UseGoodNumReq) returns (UseGoodNumRes);
    rpc DelGoodNum (DelGoodNumReq) returns (DelGoodNumRes);
    rpc GuaranteedAward (GuaranteedAwardReq) returns (GuaranteedAwardRes);


    rpc GetPlayerPay (GetPlayerPayReq) returns (GetPlayerPayRes);
    rpc PlayerDice (GetPlayerDiceReq) returns (GetPlayerDiceRes);
    rpc PlayerDiceRewardList (GetPlayerDiceRewardListReq) returns (GetPlayerDiceRewardListRes);
    rpc PlayActDice(PlayActDiceReq) returns (PlayActDiceRes);
    rpc ActitivyMarqueeMsg(GetActivityMarqueeMsgReq) returns (GetActivityMarqueeMsgRes);
    rpc PlayerSort (PlayerSortReq) returns (PlayerSortRes);
    rpc RoomSort (RoomSortReq) returns (RoomSortRes);
    rpc ManyPlayerSort (ManyPlayerSortReq) returns (ManyPlayerSortRes);
    rpc GroupSort(GroupSortReq) returns (GroupSortRes);

    rpc GetTheme (GetThemeReq) returns (GetThemeRes);

    rpc ListWinLottery (ListWinLotteryReq) returns (ListWinLotteryRes);

    rpc ReceiveWelfare (ReceiveWelfareReq) returns (ReceiveWelfareRes);
    rpc ListWelfare (ListWelfareReq) returns (ListWelfareRes);
    rpc WelfareReceiveLog (WelfareReceiveLogReq) returns (WelfareReceiveLogRes);
    rpc DoTask (DoTaskReq) returns (DoTaskRes);
    rpc ApplyForDoWelfare(ApplyForDoWelfareReq) returns (ApplyForDoWelfareRes);

    rpc PublishComment (PublishCommentReq) returns (PublishCommentRes);
    rpc ListComment (ListCommentReq) returns (ListCommentRes);
    rpc ListNameList (ListNameListReq) returns (ListNameListRes);

    rpc GiveALike (GiveALikeReq) returns (GiveALikeRes);
    rpc GiveALikeComment (GiveALikeCommentReq) returns (GiveALikeCommentRes);

    rpc UploadFile(UploadFileReq) returns (UploadFileRes);

    rpc PlayerIntegralValue(PlayerIntegralValueReq) returns (PlayerIntegralValueRes);
    rpc ListPlayerIntegralLottery(ListPlayerIntegralLotteryReq) returns (ListPlayerIntegralLotteryRes);
    rpc PlayPlayerIntegralLottery(PlayPlayerIntegralLotteryReq) returns (PlayPlayerIntegralLotteryRes);
    rpc PlayerPlayIntegralLotteryRecords(PlayerPlayIntegralLotteryRecordsReq) returns (PlayerPlayIntegralLotteryRecordsRes);
    rpc PlayerBonusPoolReceiveStatus(PlayerBonusPoolReceiveStatusReq) returns (PlayerBonusPoolReceiveStatusRes);
    rpc PlayerBonusPoolReceiceNum(PlayerBonusPoolReceiceNumReq) returns (PlayerBonusPoolReceiceNumRes);
    rpc PlayerBonusPoolReceice(PlayerBonusPoolReceiceReq) returns (PlayerBonusPoolReceiceRes);

    rpc ActivityTaskScheduleList(ActivityTaskScheduleListReq) returns (ActivityTaskScheduleListRes);

    rpc H5ConfessionList (H5ConfessionListReq) returns (H5ConfessionListRes);

    rpc H5AuctionList (H5AuctionListReq) returns (H5AuctionListRes);
    rpc H5AuctionRank (H5AuctionRankReq) returns (H5AuctionRankRes);

    rpc IsPlayerCanHadChargeAward(IsPlayerCanHadChargeAwardReq) returns (IsPlayerCanHadChargeAwardRes);
    rpc H5KingOfSinging (H5KingOfSingingReq) returns (H5KingOfSingingRes);
    rpc H5KingOfSingingVote (H5KingOfSingingVoteReq) returns (H5KingOfSingingVoteRes);
    rpc H5KingOfSingingBeVoteRecord(H5KingOfSingingBeVoteRecordReq) returns (H5KingOfSingingBeVoteRecordRes);
    rpc GetWeekRechargeAward (WeekRechargeAwardReq) returns (WeekRechargeAwardRes);
    rpc ForecastVote(ForecastVoteReq) returns (ForecastVoteRes);
    rpc ForecastVoteRecord(ForecastVoteRecordReq) returns (ForecastVoteRecordRes);
    rpc ForecastBonusPoolNum(ForecastBonusPoolNumReq) returns (ForecastBonusPoolNumRes);
    rpc ForecastPlayerBeVotingNum(ForecastPlayerBeVotingNumReq) returns (ForecastPlayerBeVotingNumRes);

    rpc RoomAwardData(RoomAwardDataReq) returns (RoomAwardDataRes);
    rpc RoomAwardReceive(RoomAwardReceiveReq) returns (RoomAwardReceiveRes);

    rpc ActOpenGiftBox (ActOpenGiftBoxReq) returns (ActOpenGiftBoxRes);
    rpc ActGiftBoxRecord (ActGiftBoxRecordReq) returns (ActGiftBoxRecordRes);
    rpc LotteryPoint (GetLotteryPointReq) returns (GetLotteryPointRes);
    rpc DrawLucky (DrawLuckyReq) returns (DrawLuckyRes);
    rpc ListNoticeRecord (ListNoticeRecordReq) returns (ListNoticeRecordRes);
    rpc ListLotteryRecord (ListLotteryRecordReq) returns (ListLotteryRecordRes);
    rpc ListSpecialAward (ListSpecialAwardReq) returns (ListSpecialAwardRes);
    rpc ListPlayerActAward (ListPlayerActAwardReq) returns (ListPlayerActAwardRes);

    rpc PartitionRecords(PartitionRecordsReq) returns (PartitionRecordsRes);
    rpc PartitionTotal(PartitionTotalReq) returns (PartitionTotalRes);

    rpc IsPlayerDidFirstCharge(IsPlayerDidFirstChargeReq) returns (IsPlayerDidFirstChargeRes);

    rpc WinGoodsRecords(WinGoodsRecordsReq) returns (WinGoodsRecordsRes);

    rpc ActAwardFlowRecord(ActAwardFlowRecordReq) returns (ActAwardFlowRecordRes);

    rpc OldPlayerGetAwardByOtherPlayerID(OldPlayerGetAwardByOtherPlayerIDReq) returns (OldPlayerGetAwardByOtherPlayerIDRes);

    rpc MonsterNianStatus(MonsterNianStatusReq) returns (MonsterNianStatusRes);
    rpc MonsterNianGoodAttackData(MonsterNianGoodAttackDataReq) returns (MonsterNianGoodAttackDataRes);
    rpc MonsterNianAttack(MonsterNianAttackReq) returns (MonsterNianAttackRes);
    rpc MonsterNianSendInvite(MonsterNianSendInviteReq) returns (MonsterNianSendInviteRes);
    rpc MonsterNianHandleInvite(MonsterNianHandleInviteReq) returns (MonsterNianHandleInviteRes);
    rpc MonsterNianTeamData(MonsterNianTeamDataReq) returns (MonsterNianTeamDataRes);
    rpc MonsterNianInviteMsgs(MonsterNianInviteMsgsReq) returns (MonsterNianInviteMsgsRes);
    rpc MonsterNianMvpRecords(MonsterNianMvpRecordsReq) returns (MonsterNianMvpRecordsRes);

    rpc QaJoin(QAJoinReq) returns (QAJoinRes);
    rpc QASubmit(QASubmitReq) returns (QASubmitRes);
    rpc QAward(QAwardReq) returns (QAwardRes);
    rpc QAGetAward(QAGetAwardReq) returns (QAGetAwardRes);
    rpc QAssitFriends(QAssitFriendsReq) returns (QAssitFriendsRes);
    rpc QAInit(QAInitReq) returns (QAInitRes);

    rpc HbyStart(HbyStartReq) returns (HbyStartRes);
    rpc HbyUserWin(HbyUserWinReq) returns (HbyUserWinRes);
    rpc HbyInit(HbyInitReq) returns (HbyInitRes);
    rpc HbyWithdrawalWindow(HbyWithdrawalWindowReq) returns (HbyWithdrawalWindowRes);
    rpc HbyWithdrawal(HbyWithdrawalReq) returns (HbyWithdrawalRes);
    rpc HbyWithdrawalData(HbyWithdrawalDataReq) returns (HbyWithdrawalDataRes);
    rpc HbyAwardMessage(HbyAwardMessageReq) returns (HbyAwardMessageRes);

    rpc LuckFunGoodsList(LuckFunGoodsListReq) returns (LuckFunGoodsListRes);
    rpc LuckFunSnatchTreasure(LuckFunSnatchTreasureReq) returns (LuckFunSnatchTreasureRes);
    rpc LuckFunRankList(LuckFunRankListReq) returns (LuckFunRankListRes);

    rpc GetAnniversary(AnniversaryReq) returns (AnniversaryRes);

    rpc DoubleForecastGambleList(DoubleForecastGambleListReq) returns (DoubleForecastGambleListRes);
    rpc DoubleForecastBet(DoubleForecastBetReq) returns (DoubleForecastBetRes);
    rpc DoubleForecastBetRecord(DoubleForecastBetRecordReq) returns (DoubleForecastBetRecordRes);

    rpc NumLotteryStatus(NumLotteryStatusReq) returns (NumLotteryStatusRes);
    rpc NumLotteryChosenNums(NumLotteryChosenNumsReq) returns (NumLotteryChosenNumsRes);
    rpc NumLotteryResults(NumLotteryResultsReq) returns (NumLotteryResultsRes);
    rpc NumLotteryPlay(NumLotteryPlayReq) returns (NumLotteryPlayRes);

    rpc FetchPkteamInfo(FetchPkteamInfoReq) returns (FetchPkteamInfoRes);
    rpc SetPkteamSlogan(SetPkteamSloganReq) returns (SetPkteamSloganRes);
    rpc CreatePkteam(CreatePkteamReq) returns (CreatePkteamRes);
    rpc ApplyPkteam(ApplyPkteamReq) returns (ApplyPkteamRes);
    rpc AgreeApplyPkteam(AgreeApplyPkteamReq) returns (AgreeApplyPkteamRes);
    rpc OpenPkteam(OpenPkteamReq) returns (OpenPkteamRes);
    rpc FetchPkInfoList(FetchPkInfoListReq) returns (FetchPkInfoListRes);
    rpc FetchPkInfo(FetchPkInfoReq) returns (FetchPkInfoRes);
    rpc FetchPkInfoByPkNum(FetchPkInfoByPkNumReq) returns (FetchPkInfoByPkNumRes);
    rpc FetchPkRecordList(FetchPkRecordListReq) returns (FetchPkRecordListRes);
    rpc HelpTeam(HelpTeamReq) returns (HelpTeamRes);

    rpc GetActPlayerRoomLiveData(GetActPlayerRoomLiveDataReq) returns (GetActPlayerRoomLiveDataRes);

    rpc SendCPInvitation(SendCPInvitationReq) returns(SendCPInvitationRes);
    rpc CPInvitationList(CPInvitationListReq) returns (CPInvitationListRes);
    rpc HandleCPInvitation(HandleCPInvitationReq) returns (HandleCPInvitationRes);
    rpc CPData(CPDataReq) returns (CPDataRes);

    rpc BargainData(BargainDataReq) returns (BargainDataRes);
    rpc BargainList(BargainListReq) returns (BargainListRes);
    rpc BargainGoods(BargainGoodsReq) returns (BargainGoodsRes);
    rpc BargainStoreList(BargainStoreListReq) returns (BargainStoreListRes);
    rpc BargainBuy(BargainBuyReq) returns (BargainBuyRes);
    rpc StopBargaining(StopBargainingReq) returns (StopBargainingRes);
    rpc BargainRecord(BargainRecordReq) returns (BargainRecordRes);
    rpc BargainBuyRecord(BargainBuyRecordReq) returns (BargainBuyRecordRes);

    rpc RunCatConfigData(RunCatConfigDataReq) returns (RunCatConfigDataRes);
    rpc RunCatPlay(RunCatPlayReq) returns (RunCatPlayRes);
    rpc RunCatReportSettlementResult(RunCatReportSettlementResultReq) returns (RunCatReportSettlementResultRes);
    rpc RunCatPlayRecord(RunCatPlayRecordReq) returns (RunCatPlayRecordRes);

    rpc TreasureHouseList(TreasureHouseListReq) returns (TreasureHouseListRes);

    rpc BuyScratchOffLotteryTicks(BuyScratchOffLotteryTicksReq) returns (BuyScratchOffLotteryTicksRes);
    rpc ScratchOffLotteryOpen(ScratchOffLotteryOpenReq) returns (ScratchOffLotteryOpenRes);
    rpc ScratchOffLotteryStatus(ScratchOffLotteryStatusReq) returns (ScratchOffLotteryStatusRes);
    rpc BuyAndOpenScrarchOffLotteryTicks(BuyAndOpenScrarchOffLotteryTicksReq) returns (ScratchOffLotteryOpenRes);

    rpc LuckConstellatoryData(LuckConstellatoryDataReq) returns (LuckConstellatoryDataRes);
    rpc LuckConstellatoryDraw(LuckConstellatoryDrawReq) returns (LuckConstellatoryDrawRes);
    rpc LuckConstellatoryRecord(LuckConstellatoryRecordReq) returns (LuckConstellatoryRecordRes);

    rpc SmeltData(SmeltDataReq) returns (SmeltDataRes);
    rpc Smelting(SmeltingReq) returns (SmeltingRes);
    rpc SmeltRecord(SmeltRecordReq) returns (SmeltRecordRes);

    rpc SlotMachineData(SlotMachineDataReq) returns (SlotMachineDataRes);
    rpc SlotMachineBet(SlotMachineBetReq) returns (SlotMachineBetRes);
    rpc SlotMachineOpenRecords(SlotMachineOpenRecordsReq) returns (SlotMachineOpenRecordsRes);
    rpc SlotMachineBetRecords(SlotMachineBetRecordsReq) returns (SlotMachineBetRecordsRes);

    rpc WulinInitGame(WulinConfigReq) returns (WulinConfigRes);
    rpc WulinPk(WulinActionData) returns (WulinRecord);
    rpc WulinPkRecord(WulinRecordsReq) returns (WulinRecordsRes);

    rpc AuctionAccountInit(AuctionAccountInitReq) returns (AuctionAccountInitRes);
    rpc AuctionAccountRecord(AuctionAccountRecordReq) returns (AuctionAccountRecordRes);
    rpc AuctionAccount(AuctionAccountReq) returns (AuctionAccountRes);

    rpc SlotMachine2020Data(SlotMachine2020DataReq) returns (SlotMachine2020DataRes);
    rpc SlotMachine2020UserDate(SlotMachine2020UserDateReq) returns (SlotMachine2020UserDateRes);
    rpc SlotMachine2020WinRecords(SlotMachine2020WinRecordsReq) returns (SlotMachine2020WinRecordsRes);
    rpc SlotMachine2020Bet(SlotMachine2020BetReq) returns (SlotMachine2020BetRes);
}


syntax = "proto3";
option objc_class_prefix = "PB3";
package pb;
import "pb/common.ext.proto";

enum AssetsErr {
    AE_Success = 0;
    ErrCodeAssetsNoGold = 32002;
}
enum AssetsCmdId {
                   AssetsNone1 = 0;
                   AssetsMoneyCmdId = 300101;
                   AssetsBagCmdId = 300102;
                   AssetsEffectPlayer = 300103;
                   AssetsEffectRoom = 300104;
                   AssetsEffectTips = 300105;
                   AssetsEffectCleanUp = 300106;
                   AssetsAuthenticateConfig = 300107;
}
message AssetsMoneyReq {
}

message AssetsMoney {
    int32 gold         = 1;
    uint32 silver       = 2;
    uint32 gift_ticket   = 3;
    uint32 charge       = 4;
    uint32 cat_gold     =5;
}

message AssetsBag {
    repeated BagItem items  = 1;
}

message AssetsMoneyRes {
    uint32 flag         = 1;
    AssetsMoney money   = 2;
}

message AssetsBagReq {
}

message AssetsBagRes {
    uint32 flag             = 1;
    repeated BagItem items  = 2;

}


message BcPlayerEffect {
  int64 player_id                       = 1;
  repeated Effect effect                 = 2;
}
message BcRoomEffect {
  int64 player_id                       = 1;
  repeated Effect effect                 = 2;
}
message BcEffectCleanUp {
  int64 player_id                       = 1;
  int32 effect_id                       = 2;
}
message EffectConfigReq {
}
message EffectConfigRes {
     map<int32, EffectConfig> list = 1;
}
message GetEffectReq {
  int64 player_id               = 1;
}
message GetEffectRes {
  int32 flag                       = 1;
  int64 player_id               = 2;
  repeated Effect effect                 = 3;
}
message EffectTips {
  int32 effect_id                       = 1;
  string effect_name                    = 2;
  EffectTipsType tip_type               = 3;
  repeated int32 timeout                = 4;	
  int32 timeout_second                  = 5;	
  EffectType type                       = 6;
  EffectTimeType time_type              = 7;
  string msg                            = 8;
}

enum AssetsType {
    AT_ZERO = 0;
    AT_Hammer = 1;
    AT_POINTS = 2;
}
message AsstesDetail {
    int32 id = 1;
}
message AsstesCollection {
    string icon = 1;
    repeated AsstesDetail list = 2;
}
message GetAssetsConfReq {
}
message GetAssetsConfRes {
    map<sint32, AsstesCollection> assets_conf = 1;
}


message AuthenticateData{
  int32 id =1;
  string icon=2;
  string dialog_icon=3;
  string name=4;
}
message LoadAuthenticateDataReq {
}
message LoadAuthenticateDataRes {
  repeated AuthenticateData list=1;
}
message NotifyAuthenticateDataChangeRes{
  repeated AuthenticateData list=1;
}

message GoldCatExchangeReq{
    int64 currency=1;
    ExchangeType op_type=2;
}

enum ExchangeType {
    Exchange_Type_ZERO = 0;
    Exchange_Type_Cat = 1;
    Exchange_Type_Gold = 2;
    Exchange_Type_Charm_To_Gold = 3;
    Exchange_Type_Gold_To_Charm = 4;
}
message GoldCatExchangeRes{

}

message PersonalBillReq {
	sint64 playerId = 1;
	uint32 type = 2;	
	uint32 page = 3;	
}
message PersonalBillRes {
	uint32 type = 1;	
	uint32 page = 2;	
	repeated PersonalBillInfo data = 3;
  int64 total_give_gold = 4;
  int64 total_receive_gold = 5;
}
message PersonalBillInfo {
	uint32 type = 1; 	
	sint64 fansId = 2;	
	string fansName = 3;	 
	uint32 giftId = 4;	
	uint32 giftNum = 5;	
	sint32 gold = 6;	
	uint32 createAt = 7;	
	string remark = 8;	
	string fansIcon = 9;
  string value = 10;
  bool is_anonymous=11;
}

message GoldCharmExchangeReq{
  int64 currency=1;
  ExchangeType op_type=2;
}

message GoldCharmExchangeRes{
}


service AssetsExtObj {
    rpc GetMoney (AssetsMoneyReq) returns (AssetsMoneyRes);
    rpc GetBag (AssetsBagReq) returns (AssetsBagRes);
    rpc GetEffect (GetEffectReq) returns (GetEffectRes);
    rpc GetEffectConf (EffectConfigReq) returns (EffectConfigRes);

    rpc H5Money (AssetsMoneyReq) returns (AssetsMoneyRes);

    rpc GetAssetsConf (GetAssetsConfReq) returns (GetAssetsConfRes);
    rpc LoadAuthenticateData(LoadAuthenticateDataReq)returns(LoadAuthenticateDataRes);
    rpc GoldCatExchange(GoldCatExchangeReq)returns(GoldCatExchangeRes);
    rpc GetPersonalBill(PersonalBillReq) returns (PersonalBillRes);
    rpc GoldCharmExchange(GoldCharmExchangeReq)returns(GoldCharmExchangeRes);
}




syntax = "proto3";

option objc_class_prefix = "PB3";

package pb;
import "pb/common.ext.proto";

enum RoomErr {
  RE_Success = 0;
  ErrCodePlayerFull = 34002;
  ErrCodeRoomNotFound = 34003;
  ErrCodeBlack = 34004;
  ErrCodeKickout = 34005;
  ErrCodeHasPassword = 34006;
  ErrCodeRoomClose = 34007;
  ErrCodePasswordErr = 34008;
  ErrCodeRelogin = 34009;
  ErrCodeNoInRoom = 34010;
  ErrCodeTargetNoInRoom = 34011;
  ErrCodePermission = 34012;
  ErrCodeChairHasPlayer = 34013;
  ErrCodeChairQueueFull = 34014;
  ErrCodeChairAlready = 34015;

  ErrCodeFlowerNotEnough = 34016;
  ErrCodeTooFrequent = 34017;

  ErrCodeLeverLow = 34018;
  ErrCodeMicro = 34019;
  ErrCodeBanSpeak = 34020;
  ErrCodeBanBDFriend = 34021;

  ErrCodeNotOnChair = 34022;
  ErrCodeChairCloseAlready = 34023;
  ErrCodeChairQueueBan = 34024;
  ErrCodeChairTargetAlready = 34025;

  ErrCodeSitOnlyAdmin =
      34030;
  ErrCodeMateChoiceAlready = 34031;
  ErrCodeMateChoiceStop = 34032;

  ErrCodeVoteAlready = 34041;
  ErrCodeVoteNotRun = 34042;
  ErrCodeVoteNotEnough = 34043;
  ErrCodeRoomBan = 34044;
  ErrCodeRoomNameDirty = 34045;

  ErrCodeBFHeadlineLate = 34049;
  ErrCodeBFHeadlineLackGold = 34050;
  ErrCodeBFHeadlineTime = 34051;
  ErrCodeBFHeadlinePubGold = 34052;
  ErrCodeBFHeadlineLevel = 34053;
  ErrCodeRoomPattern = 34060;
  ErrCodeNoInRoomRepeatEnter = 34062;

  ErrCodeBackgroundNotFound = 34065;
  ErrCodeRoomIsGaming      = 34076 ;
  ErrCodeRoomSitLvLimit = 34088;

  ErrCodeRoyalSetLimit = 34107;
}

enum RoomCmdId {
  RC_Zero = 0;
  RC_PlayerEnter = 100001;
  RC_PlayerLeave = 100002;
  RC_RoomSet = 100028;
  RC_ForbidSpeak = 100041;
  RC_Kickout = 100042;
  RC_RoomAdminSet = 100046;
  RC_CloseRoom = 100050;
  Rc_RoomReception = 100051;

  RC_ChairStatus = 100102;
  RC_ChairSpeak = 100104;
  RC_ChairSpeakOnOff = 100105;
  RC_AccompanyOnOff = 100106;
  RC_Chair = 100110;
  RC_ChairSit = 100111;
  RC_ChairMove = 100112;
  RC_ChairLeaveData = 100113;
  RC_ChairQeueuStatus = 100114;
  RC_ChairQueueOpt = 100115;
  RC_ChairQeueuClear = 100116;
  RC_QueueJump = 100117;
  RC_ChairAdminOpt = 100118;
  RC_ChairQeueuAddOrDel = 100119;

  RC_OnlineFlower = 100120;
  RC_PresentFlower = 100121;

  RC_Chat = 100125;
  RC_PlayDice = 100126;

  RC_MakeFriend = 100127;

  RC_IntimateSitChair = 100128;
  RC_IntimateListChair = 100129;

  RC_StartMateChoice = 100130;
  RC_MateChoiceNum = 100131;
  RC_MateChoiceResult = 100132;
  RC_MateMatch = 100133;
  RC_MateNotMatch = 100134;
  RC_MateChairGoldStream = 100135;
  RC_BroadcastDragonBall = 100136;
  RC_MateMatchMsg = 100137;

  RC_BroadcastStartVote = 100138;
  RC_BroadcastPublishVote = 100139;

  RC_BF_Headline = 100140;

  RC_PcaChangeUser = 100150;
  RC_PcaStartPush = 100151;
  RC_PcaStopPush = 100152;

  RC_RoomBackgroundChange = 100155;

  RC_PlayFinger = 100160;
  RC_PlayNewDice = 100161;

  RC_FansClub   = 100162;
  RC_RoomHeat = 100163;

  RC_RoomSwitchVoiceSdk = 100165;
  RC_ReceiveWindow = 100169;

  RC_RoomOnOffStatus = 100170;
  RC_RoomRedEnvelope = 100171;

  RC_AnchorMission      = 100172;
  RC_RoomMessage        = 100173;

  RC_MikeCharmOnOff = 100174;
  RC_PlayerMikeCharm = 100175;
  RC_RoomTicket         = 100176;
  Rc_RoomUserReload = 100177;
  RC_NewAwardCanReceive = 100178;
  RC_RoomSubInfoData    = 100179;
}

enum EnterRoomFllowType {
  ER_Default    = 0;
  ER_Greet      = 1;
  ER_NewUser_CP = 2;
  ER_From_Model = 3;
  ER_Receive_Window = 4;
}

message ScenePlayer {
  sint64 id = 1;
  string name = 2;
  string icon = 3;
  int32 wealth_level = 4;
  int32 charm_level = 5;
  sint64 id2 = 6;
  OnlineStateType online_state = 7;
  RoomAdminType admin_type = 8;
  uint32 create_at = 9;
  sint64 flags = 10;
  sint64 flags2 = 11;
  bool is_charge = 13;
  sint64 forbid_speak_time = 14;

  bool chair_ban_speak = 15;
  bool chair_speak_onoff = 16;
  bool accompany_onoff = 17;
  bool sound_onoff = 18;
  SexType sex = 19;
  repeated Effect effect = 20;
  DeviceType device_type = 30;
  ClanInfo clan = 31;
  int32 vip_level = 32;
  GuardType guard_type = 33;
  uint32 online_exp = 34;
  int64 room_id = 35;
  int64 enter_at = 36;
  int64 charm_value=37;
  MineNotifyPunishment punish=38;
  PlayerRoyalInfo royal_info=39;

  bool  is_speak=40;

}



message FansClubEntrance {
  bool is_show = 1;
  string fans_club_name = 2;
  AuditType audit_type  = 3;
  int64 medal_id = 4;
}

message FansClubRankItem {
  Player player = 1;
  FansClubPlayerData fans_club_data = 2;
  int32 rank_num  = 3;
}

message GuardTeamEntrance {
  int64 effect_id = 1;
  GuardType guard_type = 2;
  string enter_msg = 3;
  string user_name = 4;
  string anchor_name = 5;
  int64 user_id = 6;
  int64 anchor_id = 7;
}

message AnchorMissionEntrance {
  bool is_show_anchor_mission          = 1;
  bool is_show_anchor_mission_reddot   = 2;
  bool is_show_anchor_wish             = 3;
  bool is_show_anchor_wish_reddot      = 4;
}

message PlayerMikeCharm{
  int64 player_id=1;
  int64 charm_value=2;
}

message EnterRoomReq {
  sint64 room_id = 1;
  string password = 2;
  DeviceType device_type = 3;
  int64 follow_id = 4;
  string follow_name = 5;
  int32 follow_type = 6;
  int32 follow_model_id=8;
}

message EnterRoomRes {
  sint64 room_id = 2;
  string name = 3;
  string greeting = 4;
  uint32 viewer_num = 5;
  ScenePlayer master = 6;
  sint32 category = 7;
  sint64 id2 = 8;
  RoomPattern pattern = 9;
  string password = 10;

  RoomAdminType admin_type = 11;

  repeated Chair chairs = 12;
  repeated IntimateChair intimates = 15;

  RoomType type = 13;

  AgodaKey agoda_key = 14;
  string reception = 16;
  string notice = 17;
  string label_url = 18;
  repeated string notice_list = 19;
  FansClubEntrance fans_club  = 20;
  string background_url = 21;

  GuardTeamEntrance guard_entrance = 22;
  VoiceSdkType sdk_type = 23;
  GuardTeamEntrance guardEnterMsg = 24;
  int32 heat = 25;
  sint32 chair_charm_status = 26;

  repeated RoomOnOffStatus on_off_status_list = 27;
  bool is_show_red_envelope = 28;

  AnchorMissionEntrance anchorMissionEnterMsg = 29;

  bool prompt_reception = 30;

  bool is_mike_charm_open = 31;
  string chair_image_url = 32;
}

message ModelEntrance {
  string entry_word=1;
  string model_name=2;
}

message BroadcastPlayerEnter {
  ScenePlayer player = 1;
  uint32 viewer_num = 2;
  int64 follow_id = 3;
  string follow_name = 4;
  int32 follow_type = 5;
  GuardType guard_type = 6;
  GuardTeamEntrance guardEnterMsg = 7;
  ModelEntrance entry_info=8;
}

message LeaveRoomReq {}
message LeaveRoomRes {}

message BroadcastPlayerLeave {
  sint64 room_id = 1;
  sint64 player_id = 2;
  string name = 3;
  int32 viewer_num = 4;
}

message PlayerListRes { repeated ScenePlayer value = 1; }

message SetRoomReq {
  string name = 3;
  string password = 4;
  string greeting = 5;
  sint32 category = 6;
  RoomPattern pattern = 7;
  bool prompt_reception = 8;
}

message SetRoomRes {}

message SetRoomPatternReq{
  RoomPattern pattern = 1;
}
message SetRoomPatternRes{}

message BroadcastRoomSet {
  sint64 room_id = 1;
  sint64 player_id = 2;
  string name = 3;
  string password = 4;
  string greeting = 5;
  sint32 category = 6;
  RoomPattern pattern = 7;
  bool prompt_reception = 8;
}

message SetReceptionReq { string value = 1; }

message SetReceptionRes {}

message GetRoomConfReq {

}

message GetRoomConfRes {
  bool is_high_quality = 1;
  bool is_personal_pattern = 2;
  bool is_background = 3;
  bool is_game_pattern=4;
  bool is_room_ticket=5;
  bool is_intimate_pattern=6;
}

message CompetitiveModeReq{}
message CompetitiveModeRes{
   bool is_competitive_pattern=1;
   bool is_normal_pattern=2;
}
message BroadcastReception {
  string value = 1;
  sint64 player_id = 2;
}

message BroadcastCloseRoom { sint64 room_id = 1; }

message SetRoomAdminReq {
  sint64 to_player_id = 3;
  RoomAdminType admin_type =4;
}

message SetRoomAdminRes {
  sint64 player_id = 2;
  RoomAdminType admin_type = 3;
}

message RoomPasswordReq {}

message RoomPasswordRes { string password = 1; }

message BroadcastSetRoomAdmin {
  sint64 room_id = 1;
  sint64 manager_id = 2;
  string manager_name = 3;
  sint64 player_id = 4;
  string player_name = 5;
  RoomAdminType admin_type =
      6;
}

message ForbidSpeakReq {
  sint64 to_player_id = 3;
  sint32 forbid_speak_time = 4;
}

message ForbidSpeakRes {}

message BroadcastForbidSpeak {
  sint64 room_id = 1;
  sint64 player_id = 4;
  string player_name = 5;
  sint64 manager_id = 2;
  string manager_name = 3;
  uint32 times = 6;
}

message KickoutRoomReq { sint64 to_player_id = 3; }

message KickoutRoomRes {}

message BroadcastKickout {
  sint64 room_id = 1;
  sint64 player_id = 4;
  string player_name = 5;
  sint64 manager_id = 2;
  string manager_name = 3;
}

message RoomPlayerListReq {
}

message RoomPlayerListRes {
  repeated ScenePlayer room_admins = 1;
  repeated ScenePlayer room_users = 2;
}



message GetRoomRankReq {
  sint32 type = 1;
  sint32 rank_flag =
      2;
}

message GetRoomRankRes {
  sint64 room_id = 1;
  sint32 type = 2;
  sint32 rank_flag =
      3;
  repeated Rank room_rank_list = 4;
  uint64 total_value = 5;
}


enum ChairStatus {
  CS_OPEN = 0;
  CS_CLOSE = 1;
}

message Chair {
  sint32 id = 1;
  ChairStatus status = 2;
  ScenePlayer player = 3;
  sint64 operator = 4;
  int32 gold_level = 5;
}

message ChairStatusReq {
  sint32 chair_id = 2;
  ChairStatus status = 3;
}
message ChairStatusRes {}

message ChairSpeakReq {
  sint64 target_id = 2;
  bool chair_ban_speak = 3;
}

message ChairSpeakRes {}

message BroadcastChairSpeak {
  sint64 target_id = 1;
  bool chair_ban_speak = 2;
  string target_name = 3;
  int64 operator_id = 4;
  string operator_name = 5;
}

message ChairSpeakOnOffReq {
  bool chair_speak_onoff = 1;
}

message ChairSpeakOnOffRes {}

message BroadcastChairSpeakOnOff {
  sint64 target_id = 1;
  bool chair_speak_onoff = 2;
}

message AccompanyOnOffReq { bool accompany_onoff = 1; }

message AccompanyOnOffRes {}

message BroadcastAccompanyOnOff {
  sint64 target_id = 1;
  bool accompany_onoff = 2;
}

message BroadcastChairStatus {
  sint32 chair_id = 1;
  ChairStatus status = 2;
}

message BroadcastChair {
  sint32 chair_id = 1;
  Chair chair = 2;
}

enum ChairSitType {
  CST_Zero              = 0;
  CST_Active_Chair      = 1;
  CST_Active_Button     = 2;
  CST_Passive_Chair     = 3;
  CST_Passive_RoomList  = 4;
}

message ChairSitReq {
  sint64 target_id = 2;
  sint32 chair_id = 3;
  ChairSitType chair_sit_type = 4;
  bool is_anonymous=5;
}
message ChairSitRes {
  AgodaKey agoda_key = 2;
}

message BroadcastChairSit {
  sint64 operator_id = 1;
  sint64 target_id = 2;
  sint32 chair_id = 3;
}

message ChairMoveReq {
  sint32 from_chair_id = 2;
  sint32 to_chair_id = 3;
}
message ChairMoveRes {}

message BroadcastChairMove {
  sint64 player_id = 1;
  sint32 from_chair_id = 2;
  sint32 to_chair_id = 3;
}

message ChairLeaveReq {
  sint64 target_id = 2;
  sint32 chair_id = 3;
}
message ChairLeaveRes {
  AgodaKey agoda_key = 2;
}

message BroadcastChairLeave {
  sint64 operator_id = 1;
  sint64 target_id = 2;
  sint32 chair_id = 3;
}

message BroadcastChairAdminOpt {
  sint64 operator_id = 1;
  string operator_name = 2;
  sint64 target_id = 3;
  string target_name = 4;
  int32 opt_type = 5;
}

message ChairQueueOptReq {
  uint32 type = 2;
  int64 target_id = 3;
}
message ChairQueueOptRes {}

message BroadcastChairQueueOpt {
  uint32 type = 1;
  repeated ScenePlayer queue = 3;
}

message ChairQueueJumpReq {
  sint64 target_id = 2;
}
message ChairQueueJumpRes {}

message ChairQueueReq {}

message ChairQueueRes {
  bool ban_queue_status = 1;
  repeated ScenePlayer queue = 14;
}

message PlayerChairInfoData {
  sint64 room_id = 1;
  bool on_chair = 2;
}

message PlayerChairInfoReq {
  repeated int64 player_ids = 1;
}

message PlayerChairInfoRes{
  repeated PlayerChairInfoData data = 1;
}


message OnlineFlower {
  sint64 id = 1;
  int32 giveTime = 2;
  int32 currCount = 3;
  int32 nextTime = 4;
  int32 periodTime = 5;
  int32 maxCount = 6;
}

message FlowerInfoReq {}

message FlowerInfoRes { OnlineFlower info = 1; }

message BroadcastOnlineFlower { OnlineFlower info = 1; }

message PresentFlowerReq {
  repeated sint64 target_ids = 1;
  uint32 num = 2;
  bool is_anonymous=3;
}

message PresentFlowerRes {}

message BroadcastPresentFlower {
  sint64 id = 1;
  string name = 2;
  string icon = 3;
  uint32 wealth_level = 4;
  string receive_name = 5;
  sint64 receive_id = 6;
  bool to_anonymous_player=7;
}


message ChatReq {
  string content = 1;
  bytes options = 2;
  sint64 to_id = 3;
  bool is_private = 4;
}

message ChatRes {}

message BroadcastChat {
  ChatReq chat = 2;
  sint32 at_time = 3;

  sint64 player_id = 1;
  string name = 4;
  int32 wealth_level = 5;
  int32 charm_level = 6;
  sint64 flags = 7;
  sint64 flags2 = 8;
  bool is_charge = 9;
  repeated Effect effect = 10;
  bool is_new_user = 11;
  GuardType guard_type = 12;
  PlayerRoyalInfo royal_info=13;
}

message PlayDiceReq {}

message PlayDiceRes {}

message BroadcastPlayDice {
  sint64 player_id = 1;
  int32 point = 2;
}


message UserSpeakReq {
  string content = 1;
  sint32 tiaotiao = 2;
}

message UserSpeakRes {
  int64 speak_count_down = 1;
}

message BroadcastMakeFriend {
  sint64 player_id = 1;
  string icon = 2;
  SexType sex = 3;
  sint32 wealth_level = 4;
  string name = 5;
  string broadcast_content = 6;
  sint64 id2 = 7;
  sint64 room_id = 8;
  sint32 charm_level = 9;
  sint32 pos = 10;
  sint64 time = 11;
  sint32 info_type = 12;
  GiveGift gift = 13;
  sint64 speak_room_id = 14;
  int32 vip_level = 15;
  bool is_vip_flash = 16;
}

message GiveGift {
  sint64 send_id = 1;
  string send_name = 2;
  string send_icon = 3;
  sint64 recv_id = 4;
  string recv_name = 5;
  string recv_icon = 6;
  sint64 room_id = 7;
  string room_pwd = 8;
  sint32 gift_id = 9;
  sint32 gift_num = 10;
  sint64 create_time = 11;
  sint32 Gold = 12;
}

message GetBroadcastListReq {
  sint32 pos = 1;
}
message GetBroadcastListRes {
  repeated BroadcastMakeFriend list = 1;
  sint32 status = 2;
  sint64 time = 3;
  int64 speak_count_down = 4;
}


message BroadcastIntimateSitChair {
  int64 player_id = 1;
  string player_name = 2;
  string player_icon = 3;
  int64 friend_id = 4;
  string friend_name = 5;
  string friend_icon = 6;
  int32 type = 7;
  string msg = 8;
}

message IntimateChair {
  int64 player_id = 1;
  int32 type = 2;
}

message BroadcastIntimateChairList {
  repeated IntimateChair intimates = 1;
}


message StartMateChoiceReq {}

message StartMateChoiceRes {}

message BroadcastStartMateChoice {}

message MateChoiceChairReq { int64 player_id = 1; }

message MateChoiceChairRes {}

message BroadcastMateChoiceNum { int32 num = 1; }

message MateChoiceResultReq {}

message MateChoiceResultRes {}

message BroadcastMateChoiceResult {
  map<int64, int64> pairs = 1;
}

message FansClubChange {
  int32 status = 1;
  int64 room_id = 2;
}

message MateRoomMatch {
  int32 gold_stream = 1;
  int64 room_id = 2;
  string card_key =
      3;
  int32 card_type = 4;

  int64 player1_id = 10;
  string player1_name = 11;
  string player1_icon = 12;

  int64 player2_id = 20;
  string player2_name = 21;
  string player2_icon = 22;
  bool is_world_broadcast = 23;
}

message BroadcastMateRoomMatch { MateRoomMatch match = 1; }

message BroadcastMateMatchMsg {
  int64 target_id = 1;
  string target_name = 2;
  string card_path = 3;
  string tip =
      4;
}

message BroadcastMateNotMatch {}

message BroadMateChairGoldStream {
  int64 player_id = 1;
  int32 gold_level = 2;
  SexType sex = 3;
}


message DragonBallReq { int32 type = 1; }

message DragonBallRes {
  sint64 id = 1;
  repeated sint32 dragonBall = 2;
  sint32 type = 3;
  string name = 4;
}

message BroadcastDragonBall {
  sint64 id = 1;
  repeated sint32 dragonBall = 2;
  sint32 type = 3;
  string name = 4;
}


message Vote {
  int32 vote_id = 1;
  string vote_name = 2;
  int64 begin_at = 4;
  int64 end_at = 5;
  int32 ret = 6;
  int64 player_id = 7;
  string player_name = 8;
  repeated VotePlayer vote = 9;
}

message VotePlayer {
  int64 player_id = 1;
  string nick_name = 2;
  string icon = 3;
  int32 vote = 4;
  bool is_anonymous=5;
}

message StartVoteReq {
  string vote_name = 1;
  int32 limit_at = 2;
  repeated int64 ids = 3;
}

message StartVoteRes {}

message BroadcastStartVote { Vote vote = 1; }

message GetVoteInfoReq {}

message GetVoteInfoRes { Vote vote = 1; }

message VoteReq {
  int64 target_id = 2;
}

message VoteRes {}

message PublishVoteReq {}

message PublishVoteRes {}

message BroadcastPublishVote {
  repeated VotePlayer vote = 9;
}

 message VoteRoomRecordsReq{
    int64 room_id=1;
    int32 page=2;
    int32 page_size=3;
 }

 message VoteRoomRecordsRes{
    repeated Vote list=1;
 }

message VotePlayerRecords{
  int64 begin_at=1;
  int64 player_id=2;
  string player_name=3;
  string vote_name=4;
  bool is_anonymous=5;
}

message VotePlayerRecordsReq{
  int32 page=1;
  int32 page_size=2;
}
message VotePlayerRecordsRes{
  repeated VotePlayerRecords vote = 1;
}



message BroadcastHeadline {
  Headline headline = 1;
}

message BroadFriendRoomIdReq { int64 player_id = 1; int64 to_id = 2;}
message BroadFriendRoomIdRes { int64 room_id = 1; }


message PcaChangeUser {
  string user_id = 1;
}

message PcaStartPushReq {}
message PcaStartPushRes {
  sint32 result = 1;
  sint64 room_id = 2;
}
message BroadcastPcaStartPush {
  string user_id = 1;
}

message PcaStopPushReq {}
message PcaStopPushRes {}

message PcaChangeUserAckReq {}
message PcaChangeUserAckRes {}


message Headline {
  sint64 player_id = 1;
  string name = 2;
  string icon = 3;
  SexType sex = 4;
  sint32 wealth_level = 5;
  sint32 charm_level = 6;
  string content = 7;
  sint32 show_time = 8;
  sint32 protect_time = 9;
  sint32 gold = 10;
}

message GetBFHeadlineReq {
}
message GetBFHeadlineRes {
  Headline headline = 1;
}

message PushHeadlineReq {
  string content = 1;
  sint32 gold = 2;
}
message PushHeadlineRes {
  sint32 base_gold = 1;
  sint32 add_gold = 2;
  string tip = 3;
}

message GetBFHeadlineBaseReq {
}
message GetBFHeadlineBaseRes {
  sint32 base_gold = 1;
  sint32 add_gold = 2;
  string tip = 3;
}

message GetWorldGiftReq {
  sint32 opType = 1;
}
message GetWorldGiftRes {
  repeated GiveGift gift_info = 1;
  GiveGift top = 2;
}

message GetBFInfoReq {
  sint32 onType = 1;
}
message GetBFInfoRes {
  repeated BroadcastMakeFriend list = 1;
  sint32 status = 2;
  sint64 time = 3;
  sint32 limit_charm = 4;
}

message DelHeadlineReq {
}
message DelHeadlineRes {
}

message MyChairInfoReq {}
message MyChairInfoRes {
  sint64 room_id = 1;
  bool on_chair = 2;
}

message GetScenePlayerReq {
  int64 player_id = 1;
}

message GetScenePlayerRes {
  int64 room_id = 1;
  int32 chair_id = 2;
  ScenePlayer player = 3;
}

message LockAllChairReq {
  int32 opt_type = 1;
}

message LockAllChairRes {
  int32 opt_type = 1;
}

message SetChairBanQueueReq {
  bool ban_queue_status = 1;
}
message SetChairBanQueueRes {
}

message BroadcastChairBanQueue {
  bool ban_queue_status = 1;
}

message ClearChairQueueReq {
}
message ClearChairQueueRes {
}

message BroadcastClearChairQueue {
}

message BroadcastAddChairQueue {
  uint32 type = 2;
}

message PlayFingerReq {}

message PlayFingerRes {}

message BroadcastPlayFinger {
  sint64 player_id = 1;
  int32 point = 2;
}

message PlayNewDiceReq {}

message PlayNewDiceRes {}

message BroadcastPlayNewDice {
  sint64 player_id = 1;
  int32 point = 2;
}



message RoomLaunchNoticeReq {
  int64 room_id = 1;
}
message RoomLaunchNoticeRes {
  int64 countDownTime = 1;
}

message RoomLaunchNoticeCountDownReq {
  int64 room_id = 1;
}

message RoomLaunchNoticeCountDownRes {
  int64 countDownTime = 1;
  string msg = 2;
}

message WeekStarGiftReq {
}
message WeekStarGiftRes {
  repeated int64 gift_id = 1;
  uint32 date_time = 2;
}

message WeekStarUser {
  int64 player_id = 1;
  int32 rank = 2;
  string icon = 3;
  string nickname = 4;
  int64 score = 5;
  string consortia_name = 6;
  int32 is_subscribe = 7;
}
message WeekStarRankReq {
  int32 gift_type = 1;
  int32 rank_type = 2;
}
message WeekStarRankRes {
  repeated WeekStarUser week_star_user = 1;
}

message LastWeekStarUser {
  int32 type = 1;
  string name = 2;
  string image_url = 3;
  repeated WeekStarUser week_star_users = 4;
}
message LastWeekStarRankReq {
}
message LastWeekStarRankRes {
  repeated LastWeekStarUser last_week_star_users = 1;
}

message FansClubApplyReq {
  string fans_club_name = 1;
}

message FansClubApplyRes {

}

message FansClubPlayerDataReq {
  int32 page = 1;
  int32 page_size = 2;
}

message FansClubPlayerDataRes {
  FansClubPlayerData fans_data = 1;
  repeated FansClubRankItem rank_list = 2;
  FansClubRankItem my_rank = 3;
  int32 fans_list_total_num = 4;
}

message FansClubPlayerMedalListReq {

}

message FansClubPlayerMedalListRes {
  repeated FansClubPlayerData list = 1;
  int32 max_medal_num = 2;
}

message FansClubPlayerMedalWearReq {
  int64 medal_room_id = 1;
}

message FansClubPlayerMedalWearRes {
  int64 medal_room_id = 1;
}

message FansClubRoomRankReq {
  int32 page=1;
  int32 pageSize=2;
}

message FansClubRoomRankRes {
  repeated FansClubRankItem rank_list = 1;
}

message RoomBackground {
  uint64 id = 1;
  string img_url = 2;
  string name = 3;
  string expire = 4;
  string description = 5;
  uint32 status = 6;
}
message RoomBackgroundReq {
}
message RoomBackgroundRes {
  repeated RoomBackground backgrounds = 1;
}
message SetRoomBackgroundReq {
  uint64 id = 1;
}
message SetRoomBackgroundRes {
}
message BroadcastRoomBackground {
  string background_url = 1;
  string chair_image_url = 2;
}

message ReceiveChair {
  int64 chair_id = 1;
  string image = 2;
  string chair_name = 3;
  int32 sex = 4;
  sint64 flags = 5;
  string chair_sign = 6;
  repeated int32 cert_ids=7;
}

message ReceiveWindow {
  sint64 room_id = 1;
  ReceiveChair chair = 2;
  string receive_content = 3;
  repeated string icon_list=4;
}

message CancelReceiveWindowReq {
}

message CancelReceiveWindowRes {
}
message OpenReceiveWindowReq {
}

message OpenReceiveWindowRes {
}

message ChargeGuideReq {
}
message ChargeGuideRes {
  string msg = 1;
}

message BroadcastRoomHeat {
  sint64 room_id = 1;
  int32 heat = 2;
}

enum VoiceSdkType {
  VST_NONE = 0;
  VST_TENCENT = 1;
  VST_AGORA = 2;
}
message RoomSwitchVoiceSdk {
  VoiceSdkType sdk_type = 1;
}

message BroadcastRedEnvelope {
  bool is_show_red_envelope = 1;
}

message RoomWeekRankTestReq {
  string time_info = 1;
}
message RoomWeekRankTestRes {
  string result = 1;
}

message RoomLive {
  string date = 1;
  uint32 duration = 2;
  uint32 gold = 3;
}
message RoomLiveReq {
}
message RoomLiveRes {
  repeated RoomLive lives = 1;
}
message RoomEntranceReq{
  DeviceType type = 1;
	string version = 2;
}
enum RoomEntranceType {
    RET_UNKNOWN = 0;
    RET_RIGHT_MENU = 1;
}
message RoomEntrance{
	string icon= 1;
	string url = 2;
}
message RoomEntranceList{
  repeated RoomEntrance list = 1;
}
message RoomEntranceRes{
   map<int32, RoomEntranceList> data = 1;
}

message FirstChargeReq {
}
message FirstChargeRes {
  int32 window_stay = 1;
  string window_jump = 2;
  string image_url = 3;

  int32 tip_time = 4;
  string tip_msg = 5;
}

message RoomMessageNotice {
  RoomMessageType type = 1;
  string msg           = 2;
}
enum RoomMessageType {
    RMT_UNKNOWN     = 0;
    RMT_INTIMATE    = 1;
    RMT_MIKE_CHARM_OFF_MIKE =2;
}
message PayTicketReq {
  int64 room_id = 1;
}
message PayTicketRes {
}
message TicketInfoReq {
  int64 room_id = 1;
}
message TicketInfoRes {
  int64 ticket          = 1;
  bool is_use_ticket    = 2;
}
message TicketSettingReq {
  int64 ticket          = 1;
  bool is_use_ticket    = 2;
  bool is_notice        = 3;
}
message TicketSettingRes {
}
message RoomTicketNotice {
  int64 room_id         = 1;
  bool is_use_ticket    = 2;
  bool is_modify_price = 3;
  int64 ticket          = 4;
}
message RoomVerifyReq {
  int64 room_id = 1;
  string password = 2;
  int64 follow_id=3;
}
message RoomVerifyRes {
  int64 ticket          = 1;
}

message RoomMikeCharmSettingReq{
  bool open=1;
}
message RoomMikeCharmSettingRes{
}

message ClearPlayerMikeCharmReq{
  int64 player_id=1;
}
message ClearPlayerMikeCharmRes{
}
message BroadcastMikeCharmOnOff{
  bool is_open=1;
}

message BroadcastPlayerMikeCharm{
  PlayerMikeCharm mike_charm=1;
}


message GetRandOnlineRoomReq {
  string room_ids = 1;
}
message GetRandOnlineRoomRes {
  sint64 room_id = 1;
}

message MineSwitchReq{
}
message MineSwitchRes{
  bool has_normal=1;
  bool has_amusement=2;
}

message RoomUserReloadRes{

}

service RoomExtObj {
  rpc EnterRoom(EnterRoomReq) returns (EnterRoomRes);
  rpc LeaveRoom(LeaveRoomReq) returns (LeaveRoomRes);

  rpc SetRoom(SetRoomReq) returns (SetRoomRes);
  rpc SetReception(SetReceptionReq) returns (SetReceptionRes);
  rpc SetRoomPattern(SetRoomPatternReq) returns (SetRoomPatternRes);
  rpc GetRoomConf(GetRoomConfReq) returns (GetRoomConfRes);
  rpc CompetitiveMode(CompetitiveModeReq)returns(CompetitiveModeRes);
  rpc SetRoomAdmin(SetRoomAdminReq) returns (SetRoomAdminRes);
  rpc GetRoomPassword(RoomPasswordReq) returns (RoomPasswordRes);
  rpc ForbidSpeak(ForbidSpeakReq) returns (ForbidSpeakRes);
  rpc KickoutRoom(KickoutRoomReq) returns (KickoutRoomRes);

  rpc GetBlackList(RoomPlayerListReq)
      returns (PlayerListRes);
  rpc GetAdminList(RoomPlayerListReq) returns (PlayerListRes);
  rpc GetPlayerList(RoomPlayerListReq) returns (PlayerListRes);
  rpc GetRoomPlayerList(RoomPlayerListReq) returns (RoomPlayerListRes);

  rpc GetRoomRankList(GetRoomRankReq)
      returns (GetRoomRankRes);

  rpc MyChairInfo(MyChairInfoReq) returns (MyChairInfoRes);

  rpc SetChairStatus(ChairStatusReq) returns (ChairStatusRes);
  rpc SetChairSpeak(ChairSpeakReq)
      returns (ChairSpeakRes);
  rpc SetChairSpeakOnOff(ChairSpeakOnOffReq)
      returns (ChairSpeakOnOffRes);
  rpc SetAccompanyOnOff(AccompanyOnOffReq)
      returns (AccompanyOnOffRes);
  rpc SitChair(ChairSitReq) returns (ChairSitRes);
  rpc MoveChair(ChairMoveReq) returns (ChairMoveRes);
  rpc LeaveChair(ChairLeaveReq) returns (ChairLeaveRes);

  rpc GetChairQueue(ChairQueueReq) returns (ChairQueueRes);
  rpc PlayerChairInfo(PlayerChairInfoReq) returns (PlayerChairInfoRes);
  rpc OptChairQueue(ChairQueueOptReq)
      returns (ChairQueueOptRes);
  rpc JumpChairQueue(ChairQueueJumpReq) returns (ChairQueueJumpRes);

  rpc GetFlowerInfo(FlowerInfoReq) returns (FlowerInfoRes);
  rpc PresentFlower(PresentFlowerReq) returns (PresentFlowerRes);

  rpc SendChat(ChatReq) returns (ChatRes);

  rpc PlayDice(PlayDiceReq) returns (PlayDiceRes);

  rpc UserSpeak(UserSpeakReq) returns (UserSpeakRes);
  rpc GetBroadcastList(GetBroadcastListReq)
      returns (GetBroadcastListRes);

  rpc StartMateChoice(StartMateChoiceReq)
      returns (StartMateChoiceRes);
  rpc MateChoiceChair(MateChoiceChairReq)
      returns (MateChoiceChairRes);
  rpc MateChoiceResult(MateChoiceResultReq)
      returns (MateChoiceResultRes);
  rpc DragonBall(DragonBallReq) returns (DragonBallRes);

  rpc GetVoteInfo(GetVoteInfoReq) returns (GetVoteInfoRes);
  rpc StartVote(StartVoteReq) returns (StartVoteRes);
  rpc Vote(VoteReq) returns (VoteRes);
  rpc PublishVote(PublishVoteReq) returns (PublishVoteRes);
  rpc BroadFriendRoomId(BroadFriendRoomIdReq) returns (BroadFriendRoomIdRes);

  rpc PcaStartPush(PcaStartPushReq) returns (PcaStartPushRes);
  rpc PcaStopPush(PcaStopPushReq) returns (PcaStopPushRes);
  rpc PcaChangeUserAck(PcaChangeUserAckReq) returns (PcaChangeUserAckRes);


  rpc GetBFHeadline(GetBFHeadlineReq) returns (GetBFHeadlineRes);
  rpc GetBFHeadlineBase(GetBFHeadlineBaseReq) returns (GetBFHeadlineBaseRes);
  rpc PushHeadline(PushHeadlineReq) returns (PushHeadlineRes);
  rpc GetWorldGift(GetWorldGiftReq) returns (GetWorldGiftRes);
  rpc GetBFInfo(GetBFInfoReq) returns (GetBFInfoRes);
  rpc DelHeadline(DelHeadlineReq) returns (DelHeadlineRes);

  rpc GetScenePlayer(GetScenePlayerReq) returns (GetScenePlayerRes);
  rpc LockAllChair(LockAllChairReq) returns (LockAllChairRes);
  rpc SetChairBanQueue(SetChairBanQueueReq) returns (SetChairBanQueueRes);
  rpc ClearChairQueue(ClearChairQueueReq) returns (ClearChairQueueRes);

  rpc PlayFinger(PlayFingerReq) returns (PlayFingerRes);
  rpc PlayNewDice(PlayNewDiceReq) returns (PlayNewDiceRes);

  rpc RoomLaunchNotice(RoomLaunchNoticeReq) returns (RoomLaunchNoticeRes);

  rpc RoomLaunchNoticeCountDown(RoomLaunchNoticeCountDownReq) returns (RoomLaunchNoticeCountDownRes);

  rpc WeekStarGift(WeekStarGiftReq) returns (WeekStarGiftRes);
  rpc WeekStarRank(WeekStarRankReq) returns (WeekStarRankRes);
  rpc LastWeekStarRank(LastWeekStarRankReq) returns (LastWeekStarRankRes);

  
  rpc FansClubApply(FansClubApplyReq) returns (FansClubApplyRes);
  rpc FansClubPlayerData(FansClubPlayerDataReq) returns (FansClubPlayerDataRes);
  rpc FansClubPlayerMedalList(FansClubPlayerMedalListReq) returns (FansClubPlayerMedalListRes);
  rpc FansClubPlayerMedalWear(FansClubPlayerMedalWearReq) returns (FansClubPlayerMedalWearRes);
  rpc FansClubRoomRank(FansClubRoomRankReq) returns (FansClubRoomRankRes);

  rpc RoomBackground(RoomBackgroundReq) returns (RoomBackgroundRes);
  rpc SetRoomBackground(SetRoomBackgroundReq) returns (SetRoomBackgroundRes);

  rpc CancelReceiveWindow(CancelReceiveWindowReq) returns (CancelReceiveWindowRes);
  rpc OpenReceiveWindow(OpenReceiveWindowReq) returns (OpenReceiveWindowRes);
  rpc ChargeGuide(ChargeGuideReq) returns (ChargeGuideRes);

  rpc RoomWeekRankTest(RoomWeekRankTestReq) returns (RoomWeekRankTestRes);

  rpc RoomLive(RoomLiveReq) returns (RoomLiveRes);
  rpc GetRoomEntrance(RoomEntranceReq) returns (RoomEntranceRes);

  rpc FirstCharge(FirstChargeReq) returns (FirstChargeRes);
  rpc MineSwitch(MineSwitchReq)returns(MineSwitchRes);

  rpc PayTicket(PayTicketReq) returns (PayTicketRes);
  rpc TicketInfo(TicketInfoReq) returns (TicketInfoRes);
  rpc TicketSetting(TicketSettingReq) returns (TicketSettingRes);
  rpc RoomVerify(RoomVerifyReq) returns (RoomVerifyRes);

  rpc RoomMikeCharmSetting(RoomMikeCharmSettingReq) returns(RoomMikeCharmSettingRes);
  rpc ClearPlayerMikeCharm(ClearPlayerMikeCharmReq) returns(ClearPlayerMikeCharmRes);
   rpc GetRandOnlineRoom(GetRandOnlineRoomReq) returns(GetRandOnlineRoomRes);

   rpc VoteRoomRecords(VoteRoomRecordsReq) returns(VoteRoomRecordsRes);

   rpc VotePlayerRecords(VotePlayerRecordsReq) returns(VotePlayerRecordsRes);
}

syntax = "proto3";

option objc_class_prefix = "PB3";
package pb;

import "pb/common.ext.proto";

enum FriendErr {
    ErrNone = 0;
    ErrCodeAlready = 30001;
    ErrCodePushFail = 30002;
    ErrCodeFollowLimit = 30003;
    ErrCodeNoPlayer = 30004;
    ErrCustomMax = 30020;
}

enum FriendCmdId {
    NONE200 = 0;
    OPER_CMD_ID = 200103;
    ONLINE_CMD_ID = 200104;
    ENTER_ROOM = 200105;

    GreetNovice = 200200;
    GreetNotice = 200201;
}

enum OperType {
    NONE2001 = 0;
    FOLLOW = 1;
    UNFOLLOW = 2;
    BLOCK = 3;
    UNBLOCK = 4;
}
enum FriendType {
    FT_STRANGER = 0;
    FT_BAN = -1;
    FT_FOLLOW = 1;
    FT_FRIEND = 2;
}

enum PrivateMessageType {
    PMT_ZERO = 0;
    PMT_TEXT = 1;
    PMT_PICTURE = 2;
    PMT_VOICE = 3;
    PMT_VIDEO = 4;
}

enum PrivateMessageRecordType {
    PMR_ZERO = 0;
    PMR_SEND = 1;
    PMR_RECEIVE = 2;
    PMR_DELETE = 3;
    PMR_DELETE_PLAYER = 4;
}

enum FollowSourceType {
    FROM_ZERO=0;
    FROM_ROOM = 1;
}

message PrivateMessage {
    PrivateMessageType type = 1;
    uint32 sent_at = 2;

    sint64 from = 5;
    string from_name = 6;

    sint64 to = 10;

    string content = 15;
    string addon = 16;
}

message PrivateMessageRecord {
    PrivateMessage message = 1;
    PrivateMessageRecordType type = 2;
    string attachment = 3;
}

message Online {
    uint64 id = 1;
    bool online = 2;
}

message Friender {
    uint64 id = 1;
    int32 type = 2;
    string alias = 3;
    string name = 4;
    int32 sex = 5;
    string icon = 6;
    sint64 created = 8;
    sint64 flag = 9;
    bool online = 10;
    int32 oper_type = 11;
    int32 room_id = 12;
    string signature = 13;
    int64 countDownTime = 14;
    int64 id2=15;
}

message RoomNotice {
    uint64 player_id = 1;
    int32 room_id = 2;
}

message FriendCount {
    int64 id = 1;
    int64 count = 2;
}

message FriendCommonRes {
}

message FriendListReq {
    FriendType type = 1;
    int64 player_id = 2;
    int32 page = 3;
    int32 page_size = 4;
}

message FriendListRes {
    repeated Friender list = 1;
    int32 total = 2;
}

message FriendAliasReq {
    uint64 id = 1;
    string name = 2;
}

message FriendOperReq {
    uint64 id = 1;
    OperType oper = 2;
    FollowSourceType source_type=3;
}

message FriendOperRes {
    Friender friend = 1;
}

message FriendBatchOperReq {
    repeated int64 player_id = 1;
    OperType oper = 2;
    FollowSourceType source_type=3;
}

message FriendBatchOperRes {
    repeated Friender friend = 1;
}

message UserSigReq {

}

message UserSigRes {
    string sig = 1;
}

message FriendsOperReq {

}

message FriendsOperRes {

}

message FriendsUnFollowReq {
    repeated int64 id = 1;
}

message FriendsUnFollowRes {

}

message PrivateMessageListReq {
    int64 time = 1;
}

message PrivateMessageListRes {
    repeated PrivateMessageRecord record = 1;
}

message FriendFansListReq {
    int32 page = 1;
    int32 page_size = 2;
    FriendType type = 3;
}

message FriendFansListRes {
    repeated Friender list = 1;
    int32 total = 2;
}
message FriendTypeListReq {
    repeated int64 ids = 1;
}

message FriendTypeListRes {
    map<int64, FriendType> list = 1;
}



message Novice {
    int64 player_id = 1;
    string player_name = 2;
    SexType sex = 3;
    string icon = 4;
}

message BroadcastNovice {
    repeated Novice list = 1;
    int32 expire_time = 2;
}

message BroadcastGreet {
    string content = 1;
    int64 player_id = 2;
    string player_name = 3;
    int64 room_id = 4;
}


message AcceptGreetReq {
    string content = 1;
}
message AcceptGreetRes {
}

message CancelGreetReq {
}
message CancelGreetRes {
}

message GreetContentListReq {
}
message GreetContentListRes {
    map<int32, string> list = 1;
    repeated string system_content = 2;
    int32 custom_size = 3;
}

message AddGreetContentReq {
    int32 id = 1;
    string content = 2;
}
message AddGreetContentRes {
    int32 id = 1;
}

message DelGreetContentReq {
    int32 id = 1;
}
message DelGreetContentRes {
}

message ReplyGreetReq {
    int64 player_id = 1;
}

message ReplyGreetRes {
}

message MessageTopReq {
    int64 player_id = 1;
    int32 type=2;
}

message MessageTopRes {
    int32 type=1;
    int64 value=2;
    repeated int64 list=3;
}
message MessageClearDataReq {
    int64 player_id = 1;
    int32 type=2;
}

message MessageClearDataRes {
    int32 type=1;
    int64 value=2;
}


message InviteAllFriendReq {
  int64 room_id   = 1;
  int64 player_id = 2;
  int32 pattern   = 3;
}

message InviteAllFriendRes {
  int64 countDownTime = 1;
  string message      = 2;
}

message ReportDistanceReq {
    double latitude = 1;
    double longitude = 2;
}
message ReportDistanceRes {
    int32  interval = 1;
}

message NearbyDistanceReq {
    int64 friend_id = 1;
}
message NearbyDistanceRes {
    int32 distance = 1;
}

message FriendVersionListReq {
    FriendType type = 1;
}

message FriendVersionListRes {
    map<int64, int32> m = 1;
}


service FriendExtObj {
    rpc FriendOper (FriendOperReq) returns (FriendOperRes);
    rpc FriendBatchOper (FriendBatchOperReq) returns (FriendBatchOperRes);
    rpc UserSig (UserSigReq) returns (UserSigRes);
    rpc FriendAlias (FriendAliasReq) returns (FriendCommonRes);
    rpc FriendList (FriendListReq) returns (FriendListRes);
    rpc PrivateMessageList (PrivateMessageListReq) returns (PrivateMessageListRes);
    rpc FriendsUnFollow (FriendsUnFollowReq) returns (FriendsUnFollowRes);
    rpc FriendFansList (FriendFansListReq) returns (FriendFansListRes);
    rpc GetFriendTypeList (FriendTypeListReq) returns (FriendTypeListRes);

    
    rpc AcceptGreet (AcceptGreetReq) returns (AcceptGreetRes);
    rpc CancelGreet (CancelGreetReq) returns (CancelGreetRes);
    rpc ReplyGreet (ReplyGreetReq) returns (ReplyGreetRes);
    rpc GreetContentList (GreetContentListReq) returns (GreetContentListRes);
    rpc AddGreetContent (AddGreetContentReq) returns (AddGreetContentRes);
    rpc DelGreetContent (DelGreetContentReq) returns (DelGreetContentRes);
    rpc GetMessageTop (MessageTopReq) returns (MessageTopRes);
    rpc GetMessageClearData (MessageClearDataReq) returns (MessageClearDataRes);
    rpc InviteAllFriend (InviteAllFriendReq) returns (InviteAllFriendRes);
    rpc ReportDistance (ReportDistanceReq) returns (ReportDistanceRes);
    rpc GetFriendDistance (NearbyDistanceReq) returns (NearbyDistanceRes);
    rpc FriendVersionList (FriendVersionListReq) returns (FriendVersionListRes); 


}
